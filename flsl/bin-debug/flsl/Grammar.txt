
(*
	The following is a simple EBNF Grammar for FLSL.
	It is NOT used directly by any part of the implementation,
	instead this just serves as a concise reference.
*)

(*============================ LEXER RULES ============================*)

Letter   = 'A'..'Z' | 'a'..'z';
Digit    = '0'..'9';

Sign           = '+' | '-';
NumberExponent = ('e' | 'E') [Sign] Digit {Digit};
Integer        = Digit {Digit};
DecimalNumber  = Sign Integer ['.' Integer] [NumberExponent];
Number         = DecimalNumber;

IdPart     = Letter | '_';
Identifier = IdPart {IdPart Digit};

Type      = 'Texture' | 'Matrix' | 'Float4';
Specifier = 'attribute' | 'varying';

(*============================ PARSER RULES ============================*)

literal = Number;

program     = { shader | shader_var };
block       = '{' {statement} '}';
declaration = Type Identifier;

shader     = 'shader' Identifier [':' declaration {',' declaration}] block;
shader_var = Specifier Type Identifier ';';

statement     = (declaration | assignment | function_call) ';';
assignment    = [declaration | Identifier] '=' expression;
function_call = Identifier '(' [expression] {',' expression} ')';

access = Identifer '.' Identifier;

expression       = add_expression
add_expression   = mul_expression {('+' | '-') mul_expression};
mul_expression   = unary_expression {('*' | '/') unary_expression};
unary_expression = ['-'] atom_expression;
atom_expression  = Identifier | function_call | '(' expression ')' | literal | access;

