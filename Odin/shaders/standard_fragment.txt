##ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
##else
precision mediump float;
##endif

#ifdef SHADOWMAP || SHADOWED
const float pack_max = 256.0*256.0*256.0*256.0-1.0;
const vec4 pack_weight = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0) / pack_max;
#endif
#ifdef SHADOWMAP
vec4 packFloat(float val)
{
	vec4 packedVal = floor(vec4(val)/pack_weight);
	packedVal = mod(packedVal, 256.0);
	return packedVal/255.0;
}
#endif

#ifdef SHADOWED
float unpackFloat(vec4 val)
{
	vec4 packedVal = val*255.0;
	return dot(packedVal, pack_weight);
}
#ifdef SHADOWED_PCF
uniform vec2 uShadowTexSize;
float texture2DBilinearUnpack(sampler2D tex, vec2 tc)
{
	tc *= uShadowTexSize;
	tc -= 0.5;
	vec2 w = fract(tc);
	tc -= w;
	tc += 0.5;
	tc /= uShadowTexSize;
	vec2 tcTR = tc + vec2(1.0, 0.0)/uShadowTexSize;	
	vec2 tcBL = tc + vec2(0.0, 1.0)/uShadowTexSize;	
	vec2 tcBR = tc + vec2(1.0, 1.0)/uShadowTexSize;	
	return unpackFloat(texture2D(tex, tc))*(1.0-w.x)*(1.0-w.y) +
		unpackFloat(texture2D(tex, tcTR))*w.x*(1.0-w.y) +
		unpackFloat(texture2D(tex, tcBL))*(1.0-w.x)*w.y +
		unpackFloat(texture2D(tex, tcBR))*w.x*w.y;
}

float texture2DProjBilinearUnpack(sampler2D tex, vec4 tc)
{
	return texture2DBilinearUnpack(tex, tc.st/tc.w);
}
#endif
#endif

#ifdef MATTE
#ifdef DIFFUSE_TEXTURE
varying vec2 vTextureCoord;
uniform sampler2D uSampler;
#endif
uniform vec4 uDiffuseColor;
void main(void) {
#ifdef DIFFUSE_TEXTURE
    gl_FragColor = texture2D(uSampler, vTextureCoord.st);
#else
    gl_FragColor = uDiffuseColor;
#endif
}
#else

#ifdef SHADOWMAP
void main(void) {
    gl_FragColor = packFloat(gl_FragCoord.z);
}
#else

#ifdef NORMAL_TEXTURE
// Enable OES_standard_derivatives if available and normalmapping is enabled
##ifdef GL_OES_standard_derivatives
#extension GL_OES_standard_derivatives : enable
##endif
#endif

varying vec4 vPosition;
varying vec4 vTransformedNormal;
#ifdef DIFFUSE_TEXTURE || SHININESS_TEXTURE || NORMAL_TEXTURE || SPECULAR_TEXTURE
varying vec2 vTextureCoord;
#endif
#ifdef EMISSIVE_TEXTURE
varying vec2 vEmissiveTexCoord;
#endif

#ifdef PHONG
#ifndef SHININESS_TEXTURE
uniform float uMaterialShininess;
#endif
uniform vec3 uCameraPosition;
#endif

uniform vec3 uAmbientColor;

/* Light sources */
uniform int uNumLights;
uniform int uLightType[8]; // 0 = point, 1 = spot, 2 = directional
uniform vec4 uLightLocation[8];
uniform mat4 uLightViewMatrix[8];
uniform mat4 uLightVPMatrix[8];
#ifdef PHONG
uniform vec3 uLightSpecularColor[8];
#endif
uniform vec3 uLightDiffuseColor[8];
#ifdef SHADOWED
uniform int uCastsShadows[8];
uniform sampler2D uShadowSampler[8];
#endif

#ifdef DIFFUSE_TEXTURE
uniform sampler2D uSampler;
#else
uniform vec4 uDiffuseColor;
#endif
#ifdef SHININESS_TEXTURE
uniform sampler2D uShininessSampler;
#endif
#ifdef NORMAL_TEXTURE
uniform sampler2D uNormalSampler;
#endif
uniform sampler2D uLightConeSampler;
#ifdef EMISSIVE_TEXTURE
uniform sampler2D uEmissiveSampler;
#else
uniform vec4 uEmissiveColor;
#endif
#ifdef SPECULAR_TEXTURE
uniform sampler2D uSpecularSampler;
#endif

#ifdef SHADOWED
float calcShadow(sampler2D shadowTex, vec4 lightPos)
{
    float lightDist = lightPos.z/lightPos.w;
#ifdef SHADOWED_PCF
    vec2 offset = step(0.4, fract(gl_FragCoord.xy * 0.5));
    offset.y += offset.x;
    if (offset.y > 1.1)
        offset.y = 0.0;
    float shadowDepth = texture2DProjBilinearUnpack(shadowTex, lightPos + vec4((vec2(-1.5, 0.5) + offset)*lightPos.ww/uShadowTexSize, 0.0, 0.0));
    float shadow = step(lightDist, shadowDepth);
    shadowDepth = texture2DProjBilinearUnpack(shadowTex, lightPos + vec4((vec2(0.5, 0.5) + offset)*lightPos.ww/uShadowTexSize, 0.0, 0.0));
    shadow += step(lightDist, shadowDepth);
    shadowDepth = texture2DProjBilinearUnpack(shadowTex, lightPos + vec4((vec2(-1.5, -1.5) + offset)*lightPos.ww/uShadowTexSize, 0.0, 0.0));
    shadow += step(lightDist, shadowDepth);
    shadowDepth = texture2DProjBilinearUnpack(shadowTex, lightPos + vec4((vec2(0.5, -1.5) + offset)*lightPos.ww/uShadowTexSize, 0.0, 0.0));
    shadow += step(lightDist, shadowDepth);

    return shadow / 4.0;
#else
    float shadowDepth = unpackFloat(texture2DProj(shadowTex, lightPos));
    return step(lightDist, shadowDepth);
#endif
}
#endif

void main(void) {
#ifdef PHONG
#ifdef SHININESS_TEXTURE
    float shininess = 30.0 * texture2D(uShininessSampler, vTextureCoord.st).r;
#else
    float shininess = uMaterialShininess;
#endif
#endif

    vec3 normal = normalize(vTransformedNormal.xyz);
#ifdef NORMAL_TEXTURE
##ifdef GL_OES_standard_derivatives
    vec2 deltaTexX = dFdx(vTextureCoord);
    vec2 deltaTexY = dFdy(vTextureCoord);
    vec4 deltaPosX = dFdx(vPosition);
    vec4 deltaPosY = dFdy(vPosition);
    vec3 tangent = normalize(deltaTexY.t * deltaPosX.xyz - deltaTexX.t * deltaPosY.xyz);
    vec3 bitangent = normalize(-deltaTexY.s * deltaPosX.xyz + deltaTexX.s * deltaPosY.xyz);
    mat3 tsTransform = mat3(tangent, bitangent, normal);
    normal = texture2D(uNormalSampler, vTextureCoord.st).xyz * 2.0 - vec3(1.0);
    normal = normalize(tsTransform * normal);
##endif
#endif

    vec3 diffuseContrib = uAmbientColor;
#ifdef PHONG
    vec3 specularContrib = vec3(0);
#endif

    // Iterate light sources
    float lightDist, attenuation, diffuseLightWeighting;
    vec3 lightLength, lightDirection, lightContrib;
    vec4 lsPos;
#ifdef PHONG
    vec3 specular, viewDirection, reflectionDirection;
#endif
    for (int l = 0; l < 8; ++l)
    {
        if (l >= uNumLights)
            continue;

        if (uLightType[l] == 2) {
            lightDirection = normalize(-uLightLocation[l].xyz);
        } else {
            lightLength = uLightLocation[l].xyz - vPosition.xyz;
            lightDirection = normalize(lightLength);
        }

        attenuation = 1.0;
        if (uLightType[l] != 0) {
            lsPos = uLightVPMatrix[l] * vPosition;
#ifdef SHADOWED
            if (uCastsShadows[l] != 0) {
                if (l == 0) attenuation = calcShadow(uShadowSampler[0], lsPos);
                else if (l == 1) attenuation = calcShadow(uShadowSampler[1], lsPos);
                else if (l == 2) attenuation = calcShadow(uShadowSampler[2], lsPos);
                else if (l == 3) attenuation = calcShadow(uShadowSampler[3], lsPos);
                else if (l == 4) attenuation = calcShadow(uShadowSampler[4], lsPos);
                else if (l == 5) attenuation = calcShadow(uShadowSampler[5], lsPos);
                else if (l == 6) attenuation = calcShadow(uShadowSampler[6], lsPos);
                else attenuation = calcShadow(uShadowSampler[7], lsPos);
            }
#endif
        }
        if (uLightType[l] != 2) {
            lightDist = length(lightLength) / uLightLocation[l].w;
            attenuation *= clamp(1.0 - lightDist, 0.0, 1.0);
        }

        diffuseLightWeighting = dot(normal, lightDirection);
        if (diffuseLightWeighting > 0.0) {
            lightContrib = vec3(attenuation);
            if (uLightType[l] == 1)
                lightContrib *= texture2DProj(uLightConeSampler, lsPos).rgb;
            diffuseContrib += uLightDiffuseColor[l] * lightContrib * diffuseLightWeighting;

#ifdef PHONG
#ifdef SPECULAR_TEXTURE
            specular = uLightSpecularColor[l] * texture2D(uSpecularSampler, vTextureCoord.st).rgb;
#else
            specular = uLightSpecularColor[l];
#endif
            viewDirection = normalize(vPosition.xyz-uCameraPosition);
            reflectionDirection = reflect(lightDirection, normal);
            specular *= pow(max(dot(reflectionDirection, viewDirection), 0.0), shininess);
            specularContrib += specular * lightContrib;
#endif
        }
    }

#ifdef DIFFUSE_TEXTURE
    gl_FragColor = texture2D(uSampler, vTextureCoord.st);
#else
    gl_FragColor = uDiffuseColor;
#endif

    gl_FragColor.rgb *= diffuseContrib;

#ifdef EMISSIVE_TEXTURE
    gl_FragColor.rgb += texture2D(uEmissiveSampler, vEmissiveTexCoord).rgb;
#else
    gl_FragColor.rgb += uEmissiveColor.rbg;
#endif

#ifdef PHONG
    gl_FragColor.rgb += specularContrib;
#endif
}

#endif
#endif
