// three.js - http://github.com/mrdoob/three.js
'use strict';var THREE=THREE||{REVISION:"57"};self.console=self.console||{info:function(){},log:function(){},debug:function(){},warn:function(){},error:function(){}};self.Int32Array=self.Int32Array||Array;self.Float32Array=self.Float32Array||Array;String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")};
THREE.extend=function(a,b){if(Object.keys)for(var c=Object.keys(b),d=0,e=c.length;d<e;d++){var f=c[d];Object.defineProperty(a,f,Object.getOwnPropertyDescriptor(b,f))}else for(f in c={}.hasOwnProperty,b)c.call(b,f)&&(a[f]=b[f]);return a};
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];void 0===window.requestAnimationFrame&&(window.requestAnimationFrame=function(b){var c=Date.now(),f=Math.max(0,16-(c-a)),h=window.setTimeout(function(){b(c+f)},f);a=c+f;return h});window.cancelAnimationFrame=window.cancelAnimationFrame||
function(a){window.clearTimeout(a)}})();THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;
THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;
THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;
THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;
THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Color=function(a){void 0!==a&&this.set(a);return this};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){switch(typeof a){case "number":this.setHex(a);break;case "string":this.setStyle(a)}},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*c:0.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a},
b=0.5>=c?c*(1+b):c+b-c*b,c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+),(\d+),(\d+)\)$/i.test(a))return a=/^rgb\((\d+),(\d+),(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec(a),this.r=Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,
parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=
a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},
getHSL:function(){var a={h:0,s:0,l:0};return function(){var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),h,i=(f+e)/2;if(f===e)f=h=0;else{var j=e-f,f=0.5>=i?j/(e+f):j/(2-e-f);switch(e){case b:h=(c-d)/j+(c<d?6:0);break;case c:h=(d-b)/j+2;break;case d:h=(b-c)/j+4}h/=6}a.h=h;a.s=f;a.l=i;return a}}(),getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},
add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&
a.b===this.b},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w;return this},setFromEuler:function(a,b){var c=Math.cos(a.x/2),d=Math.cos(a.y/2),e=Math.cos(a.z/2),f=Math.sin(a.x/2),h=Math.sin(a.y/2),i=Math.sin(a.z/2);void 0===b||"XYZ"===b?(this.x=f*d*e+c*h*i,this.y=c*h*e-f*d*i,this.z=c*d*i+f*h*e,this.w=c*d*e-f*h*i):"YXZ"===b?(this.x=f*d*e+c*h*i,this.y=c*h*e-f*d*i,this.z=c*d*
i-f*h*e,this.w=c*d*e+f*h*i):"ZXY"===b?(this.x=f*d*e-c*h*i,this.y=c*h*e+f*d*i,this.z=c*d*i+f*h*e,this.w=c*d*e-f*h*i):"ZYX"===b?(this.x=f*d*e-c*h*i,this.y=c*h*e+f*d*i,this.z=c*d*i-f*h*e,this.w=c*d*e+f*h*i):"YZX"===b?(this.x=f*d*e+c*h*i,this.y=c*h*e+f*d*i,this.z=c*d*i-f*h*e,this.w=c*d*e-f*h*i):"XZY"===b&&(this.x=f*d*e-c*h*i,this.y=c*h*e-f*d*i,this.z=c*d*i+f*h*e,this.w=c*d*e+f*h*i);return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);this.x=a.x*d;this.y=a.y*d;this.z=a.z*d;this.w=Math.cos(c);
return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0],a=b[4],d=b[8],e=b[1],f=b[5],h=b[9],i=b[2],j=b[6],b=b[10],k=c+f+b;0<k?(c=0.5/Math.sqrt(k+1),this.w=0.25/c,this.x=(j-h)*c,this.y=(d-i)*c,this.z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this.w=(j-h)/c,this.x=0.25*c,this.y=(a+e)/c,this.z=(d+i)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this.w=(d-i)/c,this.x=(a+e)/c,this.y=0.25*c,this.z=(h+j)/c):(c=2*Math.sqrt(1+b-c-f),this.w=(e-a)/c,this.x=(d+i)/c,this.y=(h+j)/c,this.z=0.25*c);return this},inverse:function(){this.conjugate().normalize();
return this},conjugate:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var a=this.length();0===a?(this.z=this.y=this.x=0,this.w=1):(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a);return this},multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a.x,d=a.y,e=a.z,f=a.w,h=b.x,i=b.y,j=b.z,k=b.w;this.x=c*k+f*h+d*j-e*i;this.y=d*k+f*i+e*h-c*j;this.z=e*k+f*j+c*i-d*h;this.w=f*k-c*h-d*i-e*j;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)},slerp:function(a,b){var c=this.x,d=this.y,e=this.z,
f=this.w,h=f*a.w+c*a.x+d*a.y+e*a.z;0>h?(this.w=-a.w,this.x=-a.x,this.y=-a.y,this.z=-a.z,h=-h):this.copy(a);if(1<=h)return this.w=f,this.x=c,this.y=d,this.z=e,this;var i=Math.acos(h),j=Math.sqrt(1-h*h);if(0.001>Math.abs(j))return this.w=0.5*(f+this.w),this.x=0.5*(c+this.x),this.y=0.5*(d+this.y),this.z=0.5*(e+this.z),this;h=Math.sin((1-b)*i)/j;i=Math.sin(b*i)/j;this.w=f*h+this.w*i;this.x=c*h+this.x*i;this.y=d*h+this.y*i;this.z=e*h+this.z*i;return this},equals:function(a){return a.x===this.x&&a.y===
this.y&&a.z===this.z&&a.w===this.w},clone:function(){return new THREE.Quaternion(this.x,this.y,this.z,this.w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,
b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=
a.y;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a):this.set(0,0);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);return this},
negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/
b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*
b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements,e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);
this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,h=a.z,a=a.w,i=a*b+f*d-h*c,j=a*c+h*b-e*d,k=a*d+e*c-f*b,b=-e*b-f*c-h*d;this.x=i*a+b*-e+j*-h-k*-f;this.y=j*a+b*-f+k*-e-i*-h;this.z=k*a+b*-h+i*-f-j*-e;return this},transformDirection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*
b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a,this.z/=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=
a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=
this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){this.x=a.y*b.z-a.z*b.y;this.y=
a.z*b.x-a.x*b.z;this.z=a.x*b.y-a.y*b.x;return this},angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y,a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],f=d[4],h=d[8],i=d[1],j=d[5],k=d[9],n=d[2],q=d[6],d=d[10];void 0===b||"XYZ"===
b?(this.y=Math.asin(c(h)),0.99999>Math.abs(h)?(this.x=Math.atan2(-k,d),this.z=Math.atan2(-f,e)):(this.x=Math.atan2(q,j),this.z=0)):"YXZ"===b?(this.x=Math.asin(-c(k)),0.99999>Math.abs(k)?(this.y=Math.atan2(h,d),this.z=Math.atan2(i,j)):(this.y=Math.atan2(-n,e),this.z=0)):"ZXY"===b?(this.x=Math.asin(c(q)),0.99999>Math.abs(q)?(this.y=Math.atan2(-n,d),this.z=Math.atan2(-f,j)):(this.y=0,this.z=Math.atan2(i,e))):"ZYX"===b?(this.y=Math.asin(-c(n)),0.99999>Math.abs(n)?(this.x=Math.atan2(q,d),this.z=Math.atan2(i,
e)):(this.x=0,this.z=Math.atan2(-f,j))):"YZX"===b?(this.z=Math.asin(c(i)),0.99999>Math.abs(i)?(this.x=Math.atan2(-k,j),this.y=Math.atan2(-n,e)):(this.x=0,this.y=Math.atan2(h,d))):"XZY"===b&&(this.z=Math.asin(-c(f)),0.99999>Math.abs(f)?(this.x=Math.atan2(q,j),this.y=Math.atan2(h,e)):(this.x=Math.atan2(-k,d),this.y=0));return this},setEulerFromQuaternion:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.x*a.x,e=a.y*a.y,f=a.z*a.z,h=a.w*a.w;void 0===b||"XYZ"===b?(this.x=Math.atan2(2*
(a.x*a.w-a.y*a.z),h-d-e+f),this.y=Math.asin(c(2*(a.x*a.z+a.y*a.w))),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h+d-e-f)):"YXZ"===b?(this.x=Math.asin(c(2*(a.x*a.w-a.y*a.z))),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h-d-e+f),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h-d+e-f)):"ZXY"===b?(this.x=Math.asin(c(2*(a.x*a.w+a.y*a.z))),this.y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-d-e+f),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-d+e-f)):"ZYX"===b?(this.x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-d-e+f),this.y=Math.asin(c(2*(a.y*a.w-a.x*
a.z))),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+d-e-f)):"YZX"===b?(this.x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-d+e-f),this.y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+d-e-f),this.z=Math.asin(c(2*(a.x*a.y+a.z*a.w)))):"XZY"===b&&(this.x=Math.atan2(2*(a.x*a.w+a.y*a.z),h-d+e-f),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h+d-e-f),this.z=Math.asin(c(2*(a.z*a.w-a.x*a.y))));return this},getPositionFromMatrix:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},getScaleFromMatrix:function(a){var b=
this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length(),a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;return this},getColumnFromMatrix:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},toArray:function(){return[this.x,this.y,this.z]},clone:function(){return new THREE.Vector3(this.x,
this.y,this.z)}};
THREE.extend(THREE.Vector3.prototype,{applyEuler:function(){var a=new THREE.Quaternion;return function(b,c){var d=a.setFromEuler(b,c);this.applyQuaternion(d);return this}}(),applyAxisAngle:function(){var a=new THREE.Quaternion;return function(b,c){var d=a.setFromAxisAngle(b,c);this.applyQuaternion(d);return this}}(),projectOnVector:function(){var a=new THREE.Vector3;return function(b){a.copy(b).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a=new THREE.Vector3;
return function(b){a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b).multiplyScalar(2);return this.subVectors(a,this)}}()});THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},
addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},
applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a,this.z/=a,this.w/=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=
a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d,a=a.elements,e=a[0];d=a[4];var f=a[8],h=a[1],i=a[5],j=a[9];c=a[2];b=a[6];var k=a[10];if(0.01>Math.abs(d-h)&&0.01>Math.abs(f-c)&&0.01>Math.abs(j-b)){if(0.1>Math.abs(d+h)&&0.1>Math.abs(f+c)&&0.1>Math.abs(j+b)&&0.1>Math.abs(e+i+k-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;i=(i+1)/2;k=(k+1)/2;d=(d+h)/4;f=(f+c)/4;j=(j+b)/4;e>i&&e>k?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/b,d=f/b):i>k?0.01>i?(b=0.707106781,
c=0,d=0.707106781):(c=Math.sqrt(i),b=d/c,d=j/c):0.01>k?(c=b=0.707106781,d=0):(d=Math.sqrt(k),b=f/d,c=j/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-j)*(b-j)+(f-c)*(f-c)+(h-d)*(h-d));0.001>Math.abs(a)&&(a=1);this.x=(b-j)/a;this.y=(f-c)/a;this.z=(h-d)/a;this.w=Math.acos((e+i+k-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&
(this.z=a.z);this.w<a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*
this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&
a.w===this.w},toArray:function(){return[this.x,this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}};THREE.Matrix3=function(a,b,c,d,e,f,h,i,j){this.elements=new Float32Array(9);this.set(void 0!==a?a:1,b||0,c||0,d||0,void 0!==e?e:1,f||0,h||0,i||0,void 0!==j?j:1)};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,h,i,j){var k=this.elements;k[0]=a;k[3]=b;k[6]=c;k[1]=d;k[4]=e;k[7]=f;k[2]=h;k[5]=i;k[8]=j;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],h=a[5],i=a[6],j=a[7],a=a[8];return b*f*a-b*h*j-c*e*a+c*h*i+d*e*j-d*f*i},getInverse:function(a,
b){var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/
c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8])}};THREE.Matrix4=function(a,b,c,d,e,f,h,i,j,k,n,q,t,x,y,m){var l=this.elements=new Float32Array(16);l[0]=void 0!==a?a:1;l[4]=b||0;l[8]=c||0;l[12]=d||0;l[1]=e||0;l[5]=void 0!==f?f:1;l[9]=h||0;l[13]=i||0;l[2]=j||0;l[6]=k||0;l[10]=void 0!==n?n:1;l[14]=q||0;l[3]=t||0;l[7]=x||0;l[11]=y||0;l[15]=void 0!==m?m:1};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,h,i,j,k,n,q,t,x,y,m){var l=this.elements;l[0]=a;l[4]=b;l[8]=c;l[12]=d;l[1]=e;l[5]=f;l[9]=h;l[13]=i;l[2]=j;l[6]=k;l[10]=n;l[14]=q;l[3]=t;l[7]=x;l[11]=y;l[15]=m;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]);return this},setRotationFromEuler:function(a,b){var c=
this.elements,d=a.x,e=a.y,f=a.z,h=Math.cos(d),d=Math.sin(d),i=Math.cos(e),e=Math.sin(e),j=Math.cos(f),f=Math.sin(f);if(void 0===b||"XYZ"===b){var k=h*j,n=h*f,q=d*j,t=d*f;c[0]=i*j;c[4]=-i*f;c[8]=e;c[1]=n+q*e;c[5]=k-t*e;c[9]=-d*i;c[2]=t-k*e;c[6]=q+n*e;c[10]=h*i}else"YXZ"===b?(k=i*j,n=i*f,q=e*j,t=e*f,c[0]=k+t*d,c[4]=q*d-n,c[8]=h*e,c[1]=h*f,c[5]=h*j,c[9]=-d,c[2]=n*d-q,c[6]=t+k*d,c[10]=h*i):"ZXY"===b?(k=i*j,n=i*f,q=e*j,t=e*f,c[0]=k-t*d,c[4]=-h*f,c[8]=q+n*d,c[1]=n+q*d,c[5]=h*j,c[9]=t-k*d,c[2]=-h*e,c[6]=
d,c[10]=h*i):"ZYX"===b?(k=h*j,n=h*f,q=d*j,t=d*f,c[0]=i*j,c[4]=q*e-n,c[8]=k*e+t,c[1]=i*f,c[5]=t*e+k,c[9]=n*e-q,c[2]=-e,c[6]=d*i,c[10]=h*i):"YZX"===b?(k=h*i,n=h*e,q=d*i,t=d*e,c[0]=i*j,c[4]=t-k*f,c[8]=q*f+n,c[1]=f,c[5]=h*j,c[9]=-d*j,c[2]=-e*j,c[6]=n*f+q,c[10]=k-t*f):"XZY"===b&&(k=h*i,n=h*e,q=d*i,t=d*e,c[0]=i*j,c[4]=-f,c[8]=e*j,c[1]=k*f+t,c[5]=h*j,c[9]=n*f-q,c[2]=q*f-n,c[6]=d*j,c[10]=t*f+k);return this},setRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,h=c+c,i=d+d,j=e+
e,a=c*h,k=c*i,c=c*j,n=d*i,d=d*j,e=e*j,h=f*h,i=f*i,f=f*j;b[0]=1-(n+e);b[4]=k-f;b[8]=c+i;b[1]=k+f;b[5]=1-(a+e);b[9]=d-h;b[2]=c-i;b[6]=d+h;b[10]=1-(a+n);return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var h=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);h[0]=a.x;h[4]=b.x;h[8]=c.x;h[1]=a.y;h[5]=b.y;h[9]=
c.y;h[2]=a.z;h[6]=b.z;h[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],h=c[4],i=c[8],j=c[12],k=c[1],n=c[5],q=c[9],t=c[13],x=c[2],y=c[6],m=c[10],l=c[14],C=c[3],u=c[7],r=c[11],c=c[15],A=d[0],B=d[4],I=d[8],D=d[12],w=d[1],H=
d[5],M=d[9],F=d[13],U=d[2],v=d[6],W=d[10],E=d[14],R=d[3],P=d[7],Ca=d[11],d=d[15];e[0]=f*A+h*w+i*U+j*R;e[4]=f*B+h*H+i*v+j*P;e[8]=f*I+h*M+i*W+j*Ca;e[12]=f*D+h*F+i*E+j*d;e[1]=k*A+n*w+q*U+t*R;e[5]=k*B+n*H+q*v+t*P;e[9]=k*I+n*M+q*W+t*Ca;e[13]=k*D+n*F+q*E+t*d;e[2]=x*A+y*w+m*U+l*R;e[6]=x*B+y*H+m*v+l*P;e[10]=x*I+y*M+m*W+l*Ca;e[14]=x*D+y*F+m*E+l*d;e[3]=C*A+u*w+r*U+c*R;e[7]=C*B+u*H+r*v+c*P;e[11]=C*I+u*M+r*W+c*Ca;e[15]=C*D+u*F+r*E+c*d;return this},multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,
b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyProjection(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){console.warn("DEPRECATED: Matrix4's .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
a.transformDirection(this)},crossVector:function(a){var b=this.elements,c=new THREE.Vector4;c.x=b[0]*a.x+b[4]*a.y+b[8]*a.z+b[12]*a.w;c.y=b[1]*a.x+b[5]*a.y+b[9]*a.z+b[13]*a.w;c.z=b[2]*a.x+b[6]*a.y+b[10]*a.z+b[14]*a.w;c.w=a.w?b[3]*a.x+b[7]*a.y+b[11]*a.z+b[15]*a.w:1;return c},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],h=a[5],i=a[9],j=a[13],k=a[2],n=a[6],q=a[10],t=a[14];return a[3]*(+e*i*n-d*j*n-e*h*q+c*j*q+d*h*t-c*i*t)+a[7]*(+b*i*t-b*j*q+e*f*q-d*f*t+d*j*k-e*i*k)+a[11]*
(+b*j*n-b*h*t-e*f*n+c*f*t+e*h*k-c*j*k)+a[15]*(-d*h*k-b*i*n+b*h*q+d*f*n-c*f*q+c*i*k)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=
b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){console.warn("DEPRECATED: Matrix4's .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.");var b=this.elements;return a.set(b[12],
b[13],b[14])}}(),setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],h=d[8],i=d[12],j=d[1],k=d[5],n=d[9],q=d[13],t=d[2],x=d[6],y=d[10],m=d[14],l=d[3],C=d[7],u=d[11],r=d[15];c[0]=n*m*C-q*y*C+q*x*u-k*m*u-n*x*r+k*y*r;c[4]=i*y*C-h*m*C-i*x*u+f*m*u+h*x*r-f*y*r;c[8]=h*q*C-i*n*C+i*k*u-f*q*u-h*k*r+f*n*r;c[12]=i*n*x-h*q*x-i*k*y+f*q*y+h*k*m-f*n*m;c[1]=q*y*l-n*m*l-q*t*u+j*m*u+n*t*r-j*y*r;c[5]=h*m*l-i*y*
l+i*t*u-e*m*u-h*t*r+e*y*r;c[9]=i*n*l-h*q*l-i*j*u+e*q*u+h*j*r-e*n*r;c[13]=h*q*t-i*n*t+i*j*y-e*q*y-h*j*m+e*n*m;c[2]=k*m*l-q*x*l+q*t*C-j*m*C-k*t*r+j*x*r;c[6]=i*x*l-f*m*l-i*t*C+e*m*C+f*t*r-e*x*r;c[10]=f*q*l-i*k*l+i*j*C-e*q*C-f*j*r+e*k*r;c[14]=i*k*t-f*q*t-i*j*x+e*q*x+f*j*m-e*k*m;c[3]=n*x*l-k*y*l-n*t*C+j*y*C+k*t*u-j*x*u;c[7]=f*y*l-h*x*l+h*t*C-e*y*C-f*t*u+e*x*u;c[11]=h*k*l-f*n*l-h*j*C+e*n*C+f*j*u-e*k*u;c[15]=f*n*t-h*k*t+h*j*x-e*n*x-f*j*y+e*k*y;c=d[0]*c[0]+d[1]*c[4]+d[2]*c[8]+d[3]*c[12];if(0==c){if(b)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");
console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},extractPosition:function(a){var b=this.elements,a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements,b=b.elements,d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=
b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),translate:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[12]=b[0]*c+b[4]*d+b[8]*a+b[12];b[13]=b[1]*c+b[5]*d+b[9]*a+b[13];b[14]=b[2]*c+b[6]*d+b[10]*a+b[14];b[15]=b[3]*c+b[7]*d+b[11]*a+b[15];return this},rotateX:function(a){var b=this.elements,c=b[4],d=b[5],e=b[6],f=b[7],h=b[8],i=b[9],j=b[10],k=b[11],n=Math.cos(a),a=Math.sin(a);b[4]=n*c+a*h;b[5]=n*d+a*i;b[6]=n*e+a*j;b[7]=n*f+a*k;b[8]=n*h-a*c;b[9]=n*i-a*d;b[10]=
n*j-a*e;b[11]=n*k-a*f;return this},rotateY:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],f=b[3],h=b[8],i=b[9],j=b[10],k=b[11],n=Math.cos(a),a=Math.sin(a);b[0]=n*c-a*h;b[1]=n*d-a*i;b[2]=n*e-a*j;b[3]=n*f-a*k;b[8]=n*h+a*c;b[9]=n*i+a*d;b[10]=n*j+a*e;b[11]=n*k+a*f;return this},rotateZ:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],f=b[3],h=b[4],i=b[5],j=b[6],k=b[7],n=Math.cos(a),a=Math.sin(a);b[0]=n*c+a*h;b[1]=n*d+a*i;b[2]=n*e+a*j;b[3]=n*f+a*k;b[4]=n*h-a*c;b[5]=n*i-a*d;b[6]=n*j-a*e;b[7]=n*
k-a*f;return this},rotateByAxis:function(a,b){var c=this.elements;if(1===a.x&&0===a.y&&0===a.z)return this.rotateX(b);if(0===a.x&&1===a.y&&0===a.z)return this.rotateY(b);if(0===a.x&&0===a.y&&1===a.z)return this.rotateZ(b);var d=a.x,e=a.y,f=a.z,h=Math.sqrt(d*d+e*e+f*f),d=d/h,e=e/h,f=f/h,h=d*d,i=e*e,j=f*f,k=Math.cos(b),n=Math.sin(b),q=1-k,t=d*e*q,x=d*f*q,q=e*f*q,d=d*n,y=e*n,n=f*n,f=h+(1-h)*k,h=t+n,e=x-y,t=t-n,i=i+(1-i)*k,n=q+d,x=x+y,q=q-d,j=j+(1-j)*k,k=c[0],d=c[1],y=c[2],m=c[3],l=c[4],C=c[5],u=c[6],
r=c[7],A=c[8],B=c[9],I=c[10],D=c[11];c[0]=f*k+h*l+e*A;c[1]=f*d+h*C+e*B;c[2]=f*y+h*u+e*I;c[3]=f*m+h*r+e*D;c[4]=t*k+i*l+n*A;c[5]=t*d+i*C+n*B;c[6]=t*y+i*u+n*I;c[7]=t*m+i*r+n*D;c[8]=x*k+q*l+j*A;c[9]=x*d+q*C+j*B;c[10]=x*y+q*u+j*I;c[11]=x*m+q*r+j*D;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*
a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,
0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,h=a.y,i=a.z,j=e*f,k=e*h;this.set(j*f+c,j*h-d*i,j*i+d*h,0,j*h+d*i,k*h+c,k*i-d*f,0,j*i-d*h,k*i+d*f,e*i*i+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeFrustum:function(a,b,c,d,e,f){var h=this.elements;h[0]=2*e/(b-a);h[4]=0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(f+e)/(f-e);h[14]=-2*
f*e/(f-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;return this},makePerspective:function(a,b,c,d){var a=c*Math.tan(THREE.Math.degToRad(0.5*a)),e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var h=this.elements,i=b-a,j=c-d,k=f-e;h[0]=2/i;h[4]=0;h[8]=0;h[12]=-((b+a)/i);h[1]=0;h[5]=2/j;h[9]=0;h[13]=-((c+d)/j);h[2]=0;h[6]=0;h[10]=-2/k;h[14]=-((f+e)/k);h[3]=0;h[7]=0;h[11]=0;h[15]=1;return this},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],a[4],a[8],a[12],
a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};
THREE.extend(THREE.Matrix4.prototype,{compose:function(){var a=new THREE.Matrix4,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements;a.identity();a.setRotationFromQuaternion(d);b.makeScale(e.x,e.y,e.z);this.multiplyMatrices(a,b);f[12]=c.x;f[13]=c.y;f[14]=c.z;return this}}(),decompose:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Matrix4;return function(e,f,h){var i=this.elements;a.set(i[0],i[1],i[2]);b.set(i[4],i[5],i[6]);c.set(i[8],i[9],i[10]);
e=e instanceof THREE.Vector3?e:new THREE.Vector3;f=f instanceof THREE.Quaternion?f:new THREE.Quaternion;h=h instanceof THREE.Vector3?h:new THREE.Vector3;h.x=a.length();h.y=b.length();h.z=c.length();e.x=i[12];e.y=i[13];e.z=i[14];d.copy(this);d.elements[0]/=h.x;d.elements[1]/=h.x;d.elements[2]/=h.x;d.elements[4]/=h.y;d.elements[5]/=h.y;d.elements[6]/=h.y;d.elements[8]/=h.z;d.elements[9]/=h.z;d.elements[10]/=h.z;f.setFromRotationMatrix(d);return[e,f,h]}}()});THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var h=this.planes;h[0].copy(a);h[1].copy(b);h[2].copy(c);h[3].copy(d);h[4].copy(e);h[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements,a=c[0],d=c[1],e=c[2],f=c[3],h=c[4],i=c[5],j=c[6],k=c[7],n=c[8],q=c[9],t=c[10],x=c[11],y=c[12],m=c[13],l=c[14],c=c[15];b[0].setComponents(f-a,k-h,x-n,c-y).normalize();b[1].setComponents(f+
a,k+h,x+n,c+y).normalize();b[2].setComponents(f+d,k+i,x+q,c+m).normalize();b[3].setComponents(f-d,k-i,x-q,c-m).normalize();b[4].setComponents(f-e,k-j,x-t,c-l).normalize();b[5].setComponents(f+e,k+j,x+t,c+l).normalize();return this},intersectsObject:function(){var a=new THREE.Vector3;return function(b){var c=b.matrixWorld,d=this.planes,b=-b.geometry.boundingSphere.radius*c.getMaxScaleOnAxis();a.getPositionFromMatrix(c);for(c=0;6>c;c++)if(d[c].distanceToPoint(a)<b)return!1;return!0}}(),intersectsSphere:function(a){for(var b=
this.planes,c=a.center,a=-a.radius,d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Math={clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,
b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0},degToRad:function(){var a=Math.PI/180;return function(b){return b*a}}(),radToDeg:function(){var a=180/Math.PI;return function(b){return b*a}}()};THREE.Vertex=function(a){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");return a};THREE.UV=function(a,b){console.warn("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");return new THREE.Vector2(a,b)};THREE.Spline=function(a){function b(a,b,c,d,e,f,h){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*h+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,h,i,j,k,n,q,t;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);h=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:
f+2;k=this.points[c[0]];n=this.points[c[1]];q=this.points[c[2]];t=this.points[c[3]];i=h*h;j=h*i;d.x=b(k.x,n.x,q.x,t.x,h,i,j);d.y=b(k.y,n.y,q.y,t.y,h,i,j);d.z=b(k.z,n.z,q.z,t.z,h,i,j);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,h=new THREE.Vector3,i=[],j=0;i[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),h.copy(d),j+=h.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(i[b]=j,e=b);i[i.length]=j;return{chunks:i,total:j}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,h,i=[],j=new THREE.Vector3,n=this.getLength();i.push(j.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=n.chunks[b]-n.chunks[b-1];h=Math.ceil(a*c/n.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<h-1;c++)d=e+c*(1/h)*(f-e),d=this.getPoint(d),
i.push(j.copy(d).clone());i.push(j.copy(this.points[b]).clone())}this.points=i}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);
this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);
this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a){return new THREE.Vector2((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);
return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y),b.z<this.min.z?this.min.z=b.z:b.z>this.max.z&&(this.max.z=b.z)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;
return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(0.5)},
size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=
this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a){return new THREE.Vector3((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,
this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=0.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,
new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,
this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,h,i){a.subVectors(h,e);b.subVectors(f,e);c.subVectors(d,e);var d=a.dot(a),e=a.dot(b),f=a.dot(c),j=b.dot(b),h=b.dot(c),k=d*j-e*e,i=i||new THREE.Vector3;if(0==k)return i.set(-2,-1,-1);k=1/k;j=(j*f-e*h)*k;d=(d*h-e*f)*k;return i.set(1-j-d,d,j)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return 0.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},
clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromCenterAndPoints:function(a,b){for(var c=0,d=0,e=b.length;d<e;d++)var f=a.distanceToSquared(b[d]),c=Math.max(c,f);this.center=a;this.radius=Math.sqrt(c);return this},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-
this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);
this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start),a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){var d=d||(new THREE.Matrix3).getInverse(c).transpose(),e=a.copy(this.normal).applyMatrix3(d),f=this.coplanarPoint(b);f.applyMatrix4(c);this.setFromNormalAndCoplanarPoint(e,f);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.extend(THREE.Clock.prototype,{start:function(){this.oldTime=this.startTime=void 0!==window.performance&&void 0!==window.performance.now?window.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==window.performance&&void 0!==window.performance.now?window.performance.now():Date.now(),
a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}});THREE.EventDispatcher=function(){var a={};this.addEventListener=function(b,c){void 0===a[b]&&(a[b]=[]);-1===a[b].indexOf(c)&&a[b].push(c)};this.removeEventListener=function(b,c){var d=a[b].indexOf(c);-1!==d&&a[b].splice(d,1)};this.dispatchEvent=function(b){var c=a[b.type];if(void 0!==c){b.target=this;for(var d=0,e=c.length;d<e;d++)c[d].call(this,b)}}};(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);0<this.ray.direction.lengthSq()&&this.ray.direction.normalize();this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray,d=new a.Plane,e=new a.Vector3,f=new a.Vector3,h=new a.Matrix4,i=function(a,b){return a.distance-b.distance},j=function(i,j,k){if(i instanceof a.Particle){f.getPositionFromMatrix(i.matrixWorld);j=j.ray.distanceToPoint(f);if(j>i.scale.x)return k;k.push({distance:j,point:i.position,face:null,object:i})}else if(i instanceof
a.Mesh){f.getPositionFromMatrix(i.matrixWorld);b.set(f,i.geometry.boundingSphere.radius*i.matrixWorld.getMaxScaleOnAxis());if(!j.ray.isIntersectionSphere(b))return k;var x=i.geometry,y=x.vertices,m=i.material instanceof a.MeshFaceMaterial,l=!0===m?i.material.materials:null,C=i.material.side,u,r,A,B=j.precision;i.matrixRotationWorld.extractRotation(i.matrixWorld);h.getInverse(i.matrixWorld);c.copy(j.ray).applyMatrix4(h);for(var I=0,D=x.faces.length;I<D;I++){var w=x.faces[I],C=!0===m?l[w.materialIndex]:
i.material;if(void 0!==C){d.setFromNormalAndCoplanarPoint(w.normal,y[w.a]);var H=c.distanceToPlane(d);if(!(Math.abs(H)<B)&&!(0>H)){C=C.side;if(C!==a.DoubleSide&&(u=c.direction.dot(d.normal),!(C===a.FrontSide?0>u:0<u)))continue;if(!(H<j.near||H>j.far)){e=c.at(H,e);if(w instanceof a.Face3){if(C=y[w.a],u=y[w.b],r=y[w.c],!a.Triangle.containsPoint(e,C,u,r))continue}else if(w instanceof a.Face4){if(C=y[w.a],u=y[w.b],r=y[w.c],A=y[w.d],!a.Triangle.containsPoint(e,C,u,A)&&!a.Triangle.containsPoint(e,u,r,A))continue}else throw Error("face type not supported");
k.push({distance:H,point:j.ray.at(H),face:w,faceIndex:I,object:i})}}}}}},k=function(a,b,c){for(var a=a.getDescendants(),d=0,e=a.length;d<e;d++)j(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b);0<this.ray.direction.length()&&this.ray.direction.normalize()};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&k(a,this,c);j(a,this,c);c.sort(i);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<
e;d++)j(a[d],this,c),!0===b&&k(a[d],this,c);c.sort(i);return c}})(THREE);THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.name="";this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.eulerOrder=THREE.Object3D.defaultEulerOrder;this.scale=new THREE.Vector3(1,1,1);this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixRotationWorld=new THREE.Matrix4;this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=!0;this.quaternion=
new THREE.Quaternion;this.useQuaternion=!1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.userData={}};
THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(){var a=new THREE.Matrix4;return function(b){this.matrix.multiplyMatrices(b,this.matrix);this.position.getPositionFromMatrix(this.matrix);this.scale.getScaleFromMatrix(this.matrix);a.extractRotation(this.matrix);!0===this.useQuaternion?this.quaternion.setFromRotationMatrix(a):this.rotation.setEulerFromRotationMatrix(a,this.eulerOrder)}}(),translate:function(){var a=new THREE.Vector3;return function(b,c){a.copy(c);!0===this.useQuaternion?
a.applyQuaternion(this.quaternion):a.applyEuler(this.rotation,this.eulerOrder);a.multiplyScalar(b);this.position.add(a);return this}}(),translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translate(b,a)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translate(b,a)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translate(b,a)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},
worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);!0===this.useQuaternion?this.quaternion.setFromRotationMatrix(a):this.rotation.setEulerFromRotationMatrix(a,this.eulerOrder)}}(),add:function(a){if(a===this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==
a.parent&&a.parent.remove(a);a.parent=this;this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},getChildByName:function(a,b){for(var c=
0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getChildByName(a,b),void 0!==e))return e}},getDescendants:function(a){void 0===a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.setPosition(this.position);!1===this.useQuaternion?this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder):this.matrix.setRotationFromQuaternion(this.quaternion);
(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)&&this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a){void 0===
a&&(a=new THREE.Object3D);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.rotation instanceof THREE.Vector3&&a.rotation.copy(this.rotation);a.eulerOrder=this.eulerOrder;a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixRotationWorld.copy(this.matrixRotationWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;
a.quaternion.copy(this.quaternion);a.useQuaternion=this.useQuaternion;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;for(var b=0;b<this.children.length;b++)a.add(this.children[b].clone());return a}};THREE.Object3D.defaultEulerOrder="XYZ";THREE.Object3DIdCount=0;THREE.Projector=function(){function a(){if(f===i){var a=new THREE.RenderableObject;h.push(a);i++;f++;return a}return h[f++]}function b(){if(k===q){var a=new THREE.RenderableVertex;n.push(a);q++;k++;return a}return n[k++]}function c(a,b){return b.z-a.z}function d(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,h=-a.z+a.w,i=-b.z+b.w;if(0<=e&&0<=f&&0<=h&&0<=i)return!0;if(0>e&&0>f||0>h&&0>i)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>h?c=Math.max(c,h/(h-i)):0>i&&(d=Math.min(d,h/(h-i)));if(d<
c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var e,f,h=[],i=0,j,k,n=[],q=0,t,x,y=[],m=0,l,C=[],u=0,r,A,B=[],I=0,D,w,H=[],M=0,F={objects:[],sprites:[],lights:[],elements:[]},U=new THREE.Vector3,v=new THREE.Vector4,W=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),E=new THREE.Box3,R=Array(3),P=Array(4),Ca=new THREE.Matrix4,ca=new THREE.Matrix4,oa,nb=new THREE.Matrix4,jb=new THREE.Matrix3,fa=new THREE.Matrix3,bb=new THREE.Vector3,N=new THREE.Frustum,Ua=new THREE.Vector4,kb=new THREE.Vector4;
this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);ca.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(ca)};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);ca.multiplyMatrices(b.matrixWorld,b.projectionMatrixInverse);return a.applyProjection(ca)};this.pickingRay=function(a,b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,
c)};this.projectScene=function(h,i,q,Ta){var sa=!1,cb,ya,ta,X,ga,Da,ja,pa,Qa,Wa,ha,Zb,sb;w=A=l=x=0;F.elements.length=0;h.updateMatrixWorld();void 0===i.parent&&i.updateMatrixWorld();Ca.copy(i.matrixWorldInverse.getInverse(i.matrixWorld));ca.multiplyMatrices(i.projectionMatrix,Ca);fa.getInverse(Ca);fa.transpose();N.setFromMatrix(ca);f=0;F.objects.length=0;F.sprites.length=0;F.lights.length=0;var tb=function(b){for(var c=0,d=b.children.length;c<d;c++){var f=b.children[c];if(!1!==f.visible){if(f instanceof
THREE.Light)F.lights.push(f);else if(f instanceof THREE.Mesh||f instanceof THREE.Line){if(!1===f.frustumCulled||!0===N.intersectsObject(f))e=a(),e.object=f,null!==f.renderDepth?e.z=f.renderDepth:(U.getPositionFromMatrix(f.matrixWorld),U.applyProjection(ca),e.z=U.z),F.objects.push(e)}else f instanceof THREE.Sprite||f instanceof THREE.Particle?(e=a(),e.object=f,null!==f.renderDepth?e.z=f.renderDepth:(U.getPositionFromMatrix(f.matrixWorld),U.applyProjection(ca),e.z=U.z),F.sprites.push(e)):(e=a(),e.object=
f,null!==f.renderDepth?e.z=f.renderDepth:(U.getPositionFromMatrix(f.matrixWorld),U.applyProjection(ca),e.z=U.z),F.objects.push(e));tb(f)}}};tb(h);!0===q&&F.objects.sort(c);h=0;for(q=F.objects.length;h<q;h++)if(pa=F.objects[h].object,oa=pa.matrixWorld,k=0,pa instanceof THREE.Mesh){Qa=pa.geometry;ta=Qa.vertices;Wa=Qa.faces;Qa=Qa.faceVertexUvs;jb.getInverse(oa);jb.transpose();Zb=pa.material instanceof THREE.MeshFaceMaterial;sb=!0===Zb?pa.material:null;cb=0;for(ya=ta.length;cb<ya;cb++)j=b(),j.positionWorld.copy(ta[cb]).applyMatrix4(oa),
j.positionScreen.copy(j.positionWorld).applyMatrix4(ca),j.positionScreen.x/=j.positionScreen.w,j.positionScreen.y/=j.positionScreen.w,j.positionScreen.z/=j.positionScreen.w,j.visible=!(-1>j.positionScreen.x||1<j.positionScreen.x||-1>j.positionScreen.y||1<j.positionScreen.y||-1>j.positionScreen.z||1<j.positionScreen.z);ta=0;for(cb=Wa.length;ta<cb;ta++){ya=Wa[ta];var ob=!0===Zb?sb.materials[ya.materialIndex]:pa.material;if(void 0!==ob){Da=ob.side;if(ya instanceof THREE.Face3)if(X=n[ya.a],ga=n[ya.b],
ja=n[ya.c],R[0]=X.positionScreen,R[1]=ga.positionScreen,R[2]=ja.positionScreen,!0===X.visible||!0===ga.visible||!0===ja.visible||W.isIntersectionBox(E.setFromPoints(R)))if(sa=0>(ja.positionScreen.x-X.positionScreen.x)*(ga.positionScreen.y-X.positionScreen.y)-(ja.positionScreen.y-X.positionScreen.y)*(ga.positionScreen.x-X.positionScreen.x),Da===THREE.DoubleSide||sa===(Da===THREE.FrontSide))x===m?(ha=new THREE.RenderableFace3,y.push(ha),m++,x++,t=ha):t=y[x++],t.v1.copy(X),t.v2.copy(ga),t.v3.copy(ja);
else continue;else continue;else if(ya instanceof THREE.Face4)if(X=n[ya.a],ga=n[ya.b],ja=n[ya.c],ha=n[ya.d],P[0]=X.positionScreen,P[1]=ga.positionScreen,P[2]=ja.positionScreen,P[3]=ha.positionScreen,!0===X.visible||!0===ga.visible||!0===ja.visible||!0===ha.visible||W.isIntersectionBox(E.setFromPoints(P)))if(sa=0>(ha.positionScreen.x-X.positionScreen.x)*(ga.positionScreen.y-X.positionScreen.y)-(ha.positionScreen.y-X.positionScreen.y)*(ga.positionScreen.x-X.positionScreen.x)||0>(ga.positionScreen.x-
ja.positionScreen.x)*(ha.positionScreen.y-ja.positionScreen.y)-(ga.positionScreen.y-ja.positionScreen.y)*(ha.positionScreen.x-ja.positionScreen.x),Da===THREE.DoubleSide||sa===(Da===THREE.FrontSide)){if(l===u){var $b=new THREE.RenderableFace4;C.push($b);u++;l++;t=$b}else t=C[l++];t.v1.copy(X);t.v2.copy(ga);t.v3.copy(ja);t.v4.copy(ha)}else continue;else continue;t.normalModel.copy(ya.normal);!1===sa&&(Da===THREE.BackSide||Da===THREE.DoubleSide)&&t.normalModel.negate();t.normalModel.applyMatrix3(jb).normalize();
t.normalModelView.copy(t.normalModel).applyMatrix3(fa);t.centroidModel.copy(ya.centroid).applyMatrix4(oa);ja=ya.vertexNormals;X=0;for(ga=ja.length;X<ga;X++)ha=t.vertexNormalsModel[X],ha.copy(ja[X]),!1===sa&&(Da===THREE.BackSide||Da===THREE.DoubleSide)&&ha.negate(),ha.applyMatrix3(jb).normalize(),t.vertexNormalsModelView[X].copy(ha).applyMatrix3(fa);t.vertexNormalsLength=ja.length;X=0;for(ga=Qa.length;X<ga;X++)if(ha=Qa[X][ta],void 0!==ha){Da=0;for(ja=ha.length;Da<ja;Da++)t.uvs[X][Da]=ha[Da]}t.color=
ya.color;t.material=ob;bb.copy(t.centroidModel).applyProjection(ca);t.z=bb.z;F.elements.push(t)}}}else if(pa instanceof THREE.Line){nb.multiplyMatrices(ca,oa);ta=pa.geometry.vertices;X=b();X.positionScreen.copy(ta[0]).applyMatrix4(nb);Wa=pa.type===THREE.LinePieces?2:1;cb=1;for(ya=ta.length;cb<ya;cb++)X=b(),X.positionScreen.copy(ta[cb]).applyMatrix4(nb),0<(cb+1)%Wa||(ga=n[k-2],Ua.copy(X.positionScreen),kb.copy(ga.positionScreen),!0===d(Ua,kb)&&(Ua.multiplyScalar(1/Ua.w),kb.multiplyScalar(1/kb.w),A===
I?(Qa=new THREE.RenderableLine,B.push(Qa),I++,A++,r=Qa):r=B[A++],r.v1.positionScreen.copy(Ua),r.v2.positionScreen.copy(kb),r.z=Math.max(Ua.z,kb.z),r.material=pa.material,F.elements.push(r)))}h=0;for(q=F.sprites.length;h<q;h++)pa=F.sprites[h].object,oa=pa.matrixWorld,pa instanceof THREE.Particle&&(v.set(oa.elements[12],oa.elements[13],oa.elements[14],1),v.applyMatrix4(ca),v.z/=v.w,0<v.z&&1>v.z&&(w===M?(sa=new THREE.RenderableParticle,H.push(sa),M++,w++,D=sa):D=H[w++],D.object=pa,D.x=v.x/v.w,D.y=v.y/
v.w,D.z=v.z,D.rotation=pa.rotation.z,D.scale.x=pa.scale.x*Math.abs(D.x-(v.x+i.projectionMatrix.elements[0])/(v.w+i.projectionMatrix.elements[12])),D.scale.y=pa.scale.y*Math.abs(D.y-(v.y+i.projectionMatrix.elements[5])/(v.w+i.projectionMatrix.elements[13])),D.material=pa.material,F.elements.push(D)));!0===Ta&&F.elements.sort(c);return F}};THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,f,h){this.a=a;this.b=b;this.c=c;this.d=d;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.color=f instanceof THREE.Color?f:new THREE.Color;this.vertexColors=f instanceof Array?f:[];this.vertexTangents=[];this.materialIndex=void 0!==h?h:0;this.centroid=new THREE.Vector3};
THREE.Face4.prototype={constructor:THREE.Face4,clone:function(){var a=new THREE.Face4(this.a,this.b,this.c,this.d);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Geometry=function(){THREE.EventDispatcher.call(this);this.id=THREE.GeometryIdCount++;this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=
this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getInverse(a).transpose(),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];e.normal.applyMatrix3(b).normalize();for(var f=0,h=e.vertexNormals.length;f<h;f++)e.vertexNormals[f].applyMatrix3(b).normalize();e.centroid.applyMatrix4(a)}},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],
c.centroid.set(0,0,0),c instanceof THREE.Face3?(c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.divideScalar(3)):c instanceof THREE.Face4&&(c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.add(this.vertices[c.d]),c.centroid.divideScalar(4))},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],
f=this.vertices[e.a],h=this.vertices[e.b];a.subVectors(this.vertices[e.c],h);b.subVectors(f,h);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d,e;if(void 0===this.__tmpVertices){e=this.__tmpVertices=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)e[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:d instanceof THREE.Face4&&
(d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{e=this.__tmpVertices;b=0;for(c=this.vertices.length;b<c;b++)e[b].set(0,0,0)}if(a){var f,h,i,j=new THREE.Vector3,k=new THREE.Vector3,n=new THREE.Vector3,q=new THREE.Vector3,t=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(a=this.vertices[d.a],f=this.vertices[d.b],h=this.vertices[d.c],j.subVectors(h,f),k.subVectors(a,f),j.cross(k),e[d.a].add(j),e[d.b].add(j),
e[d.c].add(j)):d instanceof THREE.Face4&&(a=this.vertices[d.a],f=this.vertices[d.b],h=this.vertices[d.c],i=this.vertices[d.d],n.subVectors(i,f),k.subVectors(a,f),n.cross(k),e[d.a].add(n),e[d.b].add(n),e[d.d].add(n),q.subVectors(i,h),t.subVectors(f,h),q.cross(t),e[d.b].add(q),e[d.c].add(q),e[d.d].add(q))}else{b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(e[d.a].add(d.normal),e[d.b].add(d.normal),e[d.c].add(d.normal)):d instanceof THREE.Face4&&(e[d.a].add(d.normal),e[d.b].add(d.normal),
e[d.c].add(d.normal),e[d.d].add(d.normal))}b=0;for(c=this.vertices.length;b<c;b++)e[b].normalize();b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c])):d instanceof THREE.Face4&&(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c]),d.vertexNormals[3].copy(e[d.d]))},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<
d;c++){e=this.faces[c];e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone();e.__originalVertexNormals||(e.__originalVertexNormals=[]);a=0;for(b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone()}var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=
[];this.morphNormals[a].vertexNormals=[];var h=this.morphNormals[a].faceNormals,i=this.morphNormals[a].vertexNormals,j,k;c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],j=new THREE.Vector3,k=e instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},h.push(j),i.push(k)}h=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=
this.faces.length;c<d;c++)e=this.faces[c],j=h.faceNormals[c],k=h.vertexNormals[c],j.copy(e.normal),e instanceof THREE.Face3?(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])):(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2]),k.d.copy(e.vertexNormals[3]))}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){function a(a,b,c,
d,e,f,w){i=a.vertices[b];j=a.vertices[c];k=a.vertices[d];n=h[e];q=h[f];t=h[w];x=j.x-i.x;y=k.x-i.x;m=j.y-i.y;l=k.y-i.y;C=j.z-i.z;u=k.z-i.z;r=q.x-n.x;A=t.x-n.x;B=q.y-n.y;I=t.y-n.y;D=1/(r*I-A*B);F.set((I*x-B*y)*D,(I*m-B*l)*D,(I*C-B*u)*D);U.set((r*y-A*x)*D,(r*l-A*m)*D,(r*u-A*C)*D);H[b].add(F);H[c].add(F);H[d].add(F);M[b].add(U);M[c].add(U);M[d].add(U)}var b,c,d,e,f,h,i,j,k,n,q,t,x,y,m,l,C,u,r,A,B,I,D,w,H=[],M=[],F=new THREE.Vector3,U=new THREE.Vector3,v=new THREE.Vector3,W=new THREE.Vector3,E=new THREE.Vector3;
b=0;for(c=this.vertices.length;b<c;b++)H[b]=new THREE.Vector3,M[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)f=this.faces[b],h=this.faceVertexUvs[0][b],f instanceof THREE.Face3?a(this,f.a,f.b,f.c,0,1,2):f instanceof THREE.Face4&&(a(this,f.a,f.b,f.d,0,1,3),a(this,f.b,f.c,f.d,1,2,3));var R=["a","b","c","d"];b=0;for(c=this.faces.length;b<c;b++){f=this.faces[b];for(d=0;d<f.vertexNormals.length;d++)E.copy(f.vertexNormals[d]),e=f[R[d]],w=H[e],v.copy(w),v.sub(E.multiplyScalar(E.dot(w))).normalize(),
W.crossVectors(f.vertexNormals[d],w),e=W.dot(M[e]),e=0>e?-1:1,f.vertexTangents[d]=new THREE.Vector4(v.x,v.y,v.z,e)}this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);
this.boundingSphere.setFromCenterAndPoints(this.boundingSphere.center,this.vertices)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,h,i,j,k;this.__tmpVertices=void 0;f=0;for(h=this.vertices.length;f<h;f++)d=this.vertices[f],d=[Math.round(d.x*e),Math.round(d.y*e),Math.round(d.z*e)].join("_"),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];e=[];f=0;for(h=this.faces.length;f<h;f++)if(a=this.faces[f],a instanceof THREE.Face3){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];
i=[a.a,a.b,a.c];d=-1;for(j=0;3>j;j++)if(i[j]==i[(j+1)%3]){e.push(f);break}}else if(a instanceof THREE.Face4){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];a.d=c[a.d];i=[a.a,a.b,a.c,a.d];d=-1;for(j=0;4>j;j++)i[j]==i[(j+1)%4]&&(0<=d&&e.push(f),d=j);if(0<=d){i.splice(d,1);var n=new THREE.Face3(i[0],i[1],i[2],a.normal,a.color,a.materialIndex);i=0;for(j=this.faceVertexUvs.length;i<j;i++)(k=this.faceVertexUvs[i][f])&&k.splice(d,1);a.vertexNormals&&0<a.vertexNormals.length&&(n.vertexNormals=a.vertexNormals,n.vertexNormals.splice(d,
1));a.vertexColors&&0<a.vertexColors.length&&(n.vertexColors=a.vertexColors,n.vertexColors.splice(d,1));this.faces[f]=n}}for(f=e.length-1;0<=f;f--){this.faces.splice(f,1);i=0;for(j=this.faceVertexUvs.length;i<j;i++)this.faceVertexUvs[i].splice(f,1)}c=this.vertices.length-b.length;this.vertices=b;return c},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];
c=0;for(d=b.length;c<d;c++){for(var e=b[c],f=[],h=0,i=e.length;h<i;h++)f.push(new THREE.Vector2(e[h].x,e[h].y));a.faceVertexUvs[0].push(f)}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.GeometryIdCount=0;THREE.BufferGeometry=function(){THREE.EventDispatcher.call(this);this.id=THREE.GeometryIdCount++;this.attributes={};this.dynamic=!1;this.offsets=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.morphTargets=[]};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,applyMatrix:function(a){var b,c;this.attributes.position&&(b=this.attributes.position.array);this.attributes.normal&&(c=this.attributes.normal.array);void 0!==b&&(a.multiplyVector3Array(b),this.verticesNeedUpdate=!0);void 0!==c&&(b=new THREE.Matrix3,b.getInverse(a).transpose(),b.multiplyVector3Array(c),this.normalizeNormals(),this.normalsNeedUpdate=!0)},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);
var a=this.attributes.position.array;if(a){var b=this.boundingBox,c,d,e;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var f=3,h=a.length;f<h;f+=3)c=a[f],d=a[f+1],e=a[f+2],c<b.min.x?b.min.x=c:c>b.max.x&&(b.max.x=c),d<b.min.y?b.min.y=d:d>b.max.y&&(b.max.y=d),e<b.min.z?b.min.z=e:e>b.max.z&&(b.max.z=e)}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=
new THREE.Sphere);var a=this.attributes.position.array;if(a){for(var b,c=0,d,e,f=0,h=a.length;f<h;f+=3)b=a[f],d=a[f+1],e=a[f+2],b=b*b+d*d+e*e,b>c&&(c=b);this.boundingSphere.radius=Math.sqrt(c)}},computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a),numItems:a};else{a=0;for(b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=
0}var e=this.attributes.position.array,f=this.attributes.normal.array,h,i,j,k,n,q,t=new THREE.Vector3,x=new THREE.Vector3,y=new THREE.Vector3,m=new THREE.Vector3,l=new THREE.Vector3;if(this.attributes.index){var C=this.attributes.index.array,u=this.offsets;c=0;for(d=u.length;c<d;++c){b=u[c].start;h=u[c].count;var r=u[c].index;a=b;for(b+=h;a<b;a+=3)h=r+C[a],i=r+C[a+1],j=r+C[a+2],k=e[3*h],n=e[3*h+1],q=e[3*h+2],t.set(k,n,q),k=e[3*i],n=e[3*i+1],q=e[3*i+2],x.set(k,n,q),k=e[3*j],n=e[3*j+1],q=e[3*j+2],y.set(k,
n,q),m.subVectors(y,x),l.subVectors(t,x),m.cross(l),f[3*h]+=m.x,f[3*h+1]+=m.y,f[3*h+2]+=m.z,f[3*i]+=m.x,f[3*i+1]+=m.y,f[3*i+2]+=m.z,f[3*j]+=m.x,f[3*j+1]+=m.y,f[3*j+2]+=m.z}}else{a=0;for(b=e.length;a<b;a+=9)k=e[a],n=e[a+1],q=e[a+2],t.set(k,n,q),k=e[a+3],n=e[a+4],q=e[a+5],x.set(k,n,q),k=e[a+6],n=e[a+7],q=e[a+8],y.set(k,n,q),m.subVectors(y,x),l.subVectors(t,x),m.cross(l),f[a]=m.x,f[a+1]=m.y,f[a+2]=m.z,f[a+3]=m.x,f[a+4]=m.y,f[a+5]=m.z,f[a+6]=m.x,f[a+7]=m.y,f[a+8]=m.z}this.normalizeNormals();this.normalsNeedUpdate=
!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a){oa.x=d[3*a];oa.y=d[3*a+1];oa.z=d[3*a+2];nb.copy(oa);fa=j[a];Ca.copy(fa);Ca.sub(oa.multiplyScalar(oa.dot(fa))).normalize();ca.crossVectors(nb,fa);bb=ca.dot(k[a]);jb=0>bb?-1:1;i[4*a]=Ca.x;i[4*a+1]=Ca.y;i[4*a+2]=Ca.z;i[4*a+3]=jb}if(void 0===this.attributes.index||void 0===this.attributes.position||
void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var b=this.attributes.index.array,c=this.attributes.position.array,d=this.attributes.normal.array,e=this.attributes.uv.array,f=c.length/3;if(void 0===this.attributes.tangent){var h=4*f;this.attributes.tangent={itemSize:4,array:new Float32Array(h),numItems:h}}for(var i=this.attributes.tangent.array,j=[],k=[],h=0;h<f;h++)j[h]=
new THREE.Vector3,k[h]=new THREE.Vector3;var n,q,t,x,y,m,l,C,u,r,A,B,I,D,w,f=new THREE.Vector3,h=new THREE.Vector3,H,M,F,U,v,W,E,R=this.offsets;F=0;for(U=R.length;F<U;++F){M=R[F].start;v=R[F].count;var P=R[F].index;H=M;for(M+=v;H<M;H+=3)v=P+b[H],W=P+b[H+1],E=P+b[H+2],n=c[3*v],q=c[3*v+1],t=c[3*v+2],x=c[3*W],y=c[3*W+1],m=c[3*W+2],l=c[3*E],C=c[3*E+1],u=c[3*E+2],r=e[2*v],A=e[2*v+1],B=e[2*W],I=e[2*W+1],D=e[2*E],w=e[2*E+1],x-=n,n=l-n,y-=q,q=C-q,m-=t,t=u-t,B-=r,r=D-r,I-=A,A=w-A,w=1/(B*A-r*I),f.set((A*x-
I*n)*w,(A*y-I*q)*w,(A*m-I*t)*w),h.set((B*n-r*x)*w,(B*q-r*y)*w,(B*t-r*m)*w),j[v].add(f),j[W].add(f),j[E].add(f),k[v].add(h),k[W].add(h),k[E].add(h)}var Ca=new THREE.Vector3,ca=new THREE.Vector3,oa=new THREE.Vector3,nb=new THREE.Vector3,jb,fa,bb;F=0;for(U=R.length;F<U;++F){M=R[F].start;v=R[F].count;P=R[F].index;H=M;for(M+=v;H<M;H+=3)v=P+b[H],W=P+b[H+1],E=P+b[H+2],a(v),a(W),a(E)}this.tangentsNeedUpdate=this.hasTangents=!0}},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);!0===this.useQuaternion?this.quaternion.setFromRotationMatrix(a):this.rotation.setEulerFromRotationMatrix(a,this.eulerOrder)}}();THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(0.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=new THREE.Vector3(0,
0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;return a};THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/2;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=
this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/
a.total).toFixed(0)+"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");a.pop();return(1>a.length?".":a.join("/"))+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,e,f,i,j,k,l){var C=/\.dds$/i.test(f),u=b+"/"+f;if(C){var r=THREE.ImageUtils.loadCompressedTexture(u);a[e]=r}else r=document.createElement("canvas"),a[e]=new THREE.Texture(r);a[e].sourceFile=f;i&&(a[e].repeat.set(i[0],i[1]),1!==i[0]&&(a[e].wrapS=THREE.RepeatWrapping),1!==i[1]&&(a[e].wrapT=THREE.RepeatWrapping));j&&a[e].offset.set(j[0],j[1]);k&&(f={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==
f[k[0]]&&(a[e].wrapS=f[k[0]]),void 0!==f[k[1]]&&(a[e].wrapT=f[k[1]]));l&&(a[e].anisotropy=l);if(!C){var A=a[e],a=new Image;a.onload=function(){if(!c(this.width)||!c(this.height)){var a=d(this.width),b=d(this.height);A.image.width=a;A.image.height=b;A.image.getContext("2d").drawImage(this,0,0,a,b)}else A.image=this;A.needsUpdate=!0};a.crossOrigin=h.crossOrigin;a.src=u}}function f(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,i="MeshLambertMaterial",j={color:15658734,opacity:1,map:null,
lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?i="MeshPhongMaterial":"basic"===k&&(i="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(j.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)j.transparent=a.transparent;void 0!==a.depthTest&&(j.depthTest=a.depthTest);void 0!==a.depthWrite&&(j.depthWrite=a.depthWrite);void 0!==a.visible&&(j.visible=a.visible);void 0!==a.flipSided&&(j.side=THREE.BackSide);
void 0!==a.doubleSided&&(j.side=THREE.DoubleSide);void 0!==a.wireframe&&(j.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?j.vertexColors=THREE.FaceColors:a.vertexColors&&(j.vertexColors=THREE.VertexColors));a.colorDiffuse?j.color=f(a.colorDiffuse):a.DbgColor&&(j.color=a.DbgColor);a.colorSpecular&&(j.specular=f(a.colorSpecular));a.colorAmbient&&(j.ambient=f(a.colorAmbient));a.transparency&&(j.opacity=a.transparency);a.specularCoef&&(j.shininess=a.specularCoef);a.mapDiffuse&&
b&&e(j,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&e(j,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&e(j,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&e(j,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&e(j,"specularMap",a.mapSpecular,a.mapSpecularRepeat,
a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(j.bumpScale=a.mapBumpScale);a.mapNormal?(i=THREE.ShaderLib.normalmap,k=THREE.UniformsUtils.clone(i.uniforms),k.tNormal.value=j.normalMap,a.mapNormalFactor&&k.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),j.map&&(k.tDiffuse.value=j.map,k.enableDiffuse.value=!0),j.specularMap&&(k.tSpecular.value=j.specularMap,k.enableSpecular.value=!0),j.lightMap&&(k.tAO.value=j.lightMap,k.enableAO.value=!0),k.uDiffuseColor.value.setHex(j.color),
k.uSpecularColor.value.setHex(j.specular),k.uAmbientColor.value.setHex(j.ambient),k.uShininess.value=j.shininess,void 0!==j.opacity&&(k.uOpacity.value=j.opacity),i=new THREE.ShaderMaterial({fragmentShader:i.fragmentShader,vertexShader:i.vertexShader,uniforms:k,lights:!0,fog:!0}),j.transparent&&(i.transparent=!0)):i=new THREE[i](j);void 0!==a.DbgName&&(i.name=a.DbgName);return i}};THREE.ImageLoader=function(){THREE.EventDispatcher.call(this);this.crossOrigin=null};THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b){var c=this;void 0===b&&(b=new Image);b.addEventListener("load",function(){c.dispatchEvent({type:"load",content:b})},!1);b.addEventListener("error",function(){c.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);c.crossOrigin&&(b.crossOrigin=c.crossOrigin);b.src=a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,h=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var i=JSON.parse(f.responseText),i=a.parse(i,d);c(i.geometry,i.materials)}else console.warn("THREE.JSONLoader: ["+b+"] seems to be unreachable or file there is empty");a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load ["+b+"] ["+f.status+"]");else f.readyState===f.LOADING?e&&(0===h&&
(h=f.getResponseHeader("Content-Length")),e({total:h,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&(h=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1,e,f,h,i,j,k,n,q,t,x,y,m,l,C,u,r=a.faces;x=a.vertices;var A=a.normals,B=a.colors,I=0;for(e=0;e<a.uvs.length;e++)a.uvs[e].length&&I++;for(e=0;e<I;e++)c.faceUvs[e]=[],c.faceVertexUvs[e]=[];i=0;for(j=x.length;i<j;)k=new THREE.Vector3,k.x=x[i++]*d,k.y=x[i++]*d,k.z=x[i++]*d,c.vertices.push(k);i=0;for(j=r.length;i<j;){x=r[i++];k=x&1;h=x&2;e=x&4;f=x&8;q=x&16;n=x&32;y=x&64;x&=128;k?(m=new THREE.Face4,m.a=
r[i++],m.b=r[i++],m.c=r[i++],m.d=r[i++],k=4):(m=new THREE.Face3,m.a=r[i++],m.b=r[i++],m.c=r[i++],k=3);h&&(h=r[i++],m.materialIndex=h);h=c.faces.length;if(e)for(e=0;e<I;e++)l=a.uvs[e],t=r[i++],u=l[2*t],t=l[2*t+1],c.faceUvs[e][h]=new THREE.Vector2(u,t);if(f)for(e=0;e<I;e++){l=a.uvs[e];C=[];for(f=0;f<k;f++)t=r[i++],u=l[2*t],t=l[2*t+1],C[f]=new THREE.Vector2(u,t);c.faceVertexUvs[e][h]=C}q&&(q=3*r[i++],f=new THREE.Vector3,f.x=A[q++],f.y=A[q++],f.z=A[q],m.normal=f);if(n)for(e=0;e<k;e++)q=3*r[i++],f=new THREE.Vector3,
f.x=A[q++],f.y=A[q++],f.z=A[q],m.vertexNormals.push(f);y&&(n=r[i++],n=new THREE.Color(B[n]),m.color=n);if(x)for(e=0;e<k;e++)n=r[i++],n=new THREE.Color(B[n]),m.vertexColors.push(n);c.faces.push(m)}if(a.skinWeights){i=0;for(j=a.skinWeights.length;i<j;i+=2)r=a.skinWeights[i],A=a.skinWeights[i+1],c.skinWeights.push(new THREE.Vector4(r,A,0,0))}if(a.skinIndices){i=0;for(j=a.skinIndices.length;i<j;i+=2)r=a.skinIndices[i],A=a.skinIndices[i+1],c.skinIndices.push(new THREE.Vector4(r,A,0,0))}c.bones=a.bones;
c.animation=a.animation;if(void 0!==a.morphTargets){i=0;for(j=a.morphTargets.length;i<j;i++){c.morphTargets[i]={};c.morphTargets[i].name=a.morphTargets[i].name;c.morphTargets[i].vertices=[];B=c.morphTargets[i].vertices;I=a.morphTargets[i].vertices;r=0;for(A=I.length;r<A;r+=3)x=new THREE.Vector3,x.x=I[r]*d,x.y=I[r+1]*d,x.z=I[r+2]*d,B.push(x)}}if(void 0!==a.morphColors){i=0;for(j=a.morphColors.length;i<j;i++){c.morphColors[i]={};c.morphColors[i].name=a.morphColors[i].name;c.morphColors[i].colors=[];
A=c.morphColors[i].colors;B=a.morphColors[i].colors;d=0;for(r=B.length;d<r;d+=3)I=new THREE.Color(16755200),I.setRGB(B[d],B[d+1],B[d+2]),A.push(I)}}c.computeCentroids();c.computeFaceNormals();d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();return{geometry:c,materials:d}};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlerMap={};this.hierarchyHandlerMap={};this.addGeometryHandler("ascii",THREE.JSONLoader)};THREE.SceneLoader.prototype.constructor=THREE.SceneLoader;
THREE.SceneLoader.prototype.load=function(a,b){var c=this,d=new XMLHttpRequest;d.onreadystatechange=function(){if(4===d.readyState)if(200===d.status||0===d.status){var e=JSON.parse(d.responseText);c.parse(e,b,a)}else console.error("THREE.SceneLoader: Couldn't load ["+a+"] ["+d.status+"]")};d.open("GET",a,!0);d.send(null)};THREE.SceneLoader.prototype.addGeometryHandler=function(a,b){this.geometryHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.addHierarchyHandler=function(a,b){this.hierarchyHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.parse=function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:q+"/"+a}function e(){f(w.scene,M.objects)}function f(a,b){var c,e,h,j,k,m,q;for(q in b)if(void 0===w.objects[q]){var l=b[q],v=null;if(l.type&&l.type in n.hierarchyHandlerMap){if(void 0===l.loading){e={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,userData:1,skin:1,morph:1,mirroredLoop:1,duration:1};h={};for(var A in l)A in e||(h[A]=l[A]);x=w.materials[l.material];l.loading=!0;
e=n.hierarchyHandlerMap[l.type].loaderObject;e.options?e.load(d(l.url,M.urlBaseType),i(q,a,x,l)):e.load(d(l.url,M.urlBaseType),i(q,a,x,l),h)}}else if(void 0!==l.geometry){if(t=w.geometries[l.geometry]){v=!1;x=w.materials[l.material];v=x instanceof THREE.ShaderMaterial;h=l.position;j=l.rotation;k=l.scale;c=l.matrix;m=l.quaternion;l.material||(x=new THREE.MeshFaceMaterial(w.face_materials[l.geometry]));x instanceof THREE.MeshFaceMaterial&&0===x.materials.length&&(x=new THREE.MeshFaceMaterial(w.face_materials[l.geometry]));
if(x instanceof THREE.MeshFaceMaterial)for(e=0;e<x.materials.length;e++)v=v||x.materials[e]instanceof THREE.ShaderMaterial;v&&t.computeTangents();l.skin?v=new THREE.SkinnedMesh(t,x):l.morph?(v=new THREE.MorphAnimMesh(t,x),void 0!==l.duration&&(v.duration=l.duration),void 0!==l.time&&(v.time=l.time),void 0!==l.mirroredLoop&&(v.mirroredLoop=l.mirroredLoop),x.morphNormals&&t.computeMorphNormals()):v=new THREE.Mesh(t,x);v.name=q;c?(v.matrixAutoUpdate=!1,v.matrix.set(c[0],c[1],c[2],c[3],c[4],c[5],c[6],
c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15])):(v.position.set(h[0],h[1],h[2]),m?(v.quaternion.set(m[0],m[1],m[2],m[3]),v.useQuaternion=!0):v.rotation.set(j[0],j[1],j[2]),v.scale.set(k[0],k[1],k[2]));v.visible=l.visible;v.castShadow=l.castShadow;v.receiveShadow=l.receiveShadow;a.add(v);w.objects[q]=v}}else"DirectionalLight"===l.type||"PointLight"===l.type||"AmbientLight"===l.type?(u=void 0!==l.color?l.color:16777215,r=void 0!==l.intensity?l.intensity:1,"DirectionalLight"===l.type?(h=l.direction,
C=new THREE.DirectionalLight(u,r),C.position.set(h[0],h[1],h[2]),l.target&&(H.push({object:C,targetName:l.target}),C.target=null)):"PointLight"===l.type?(h=l.position,e=l.distance,C=new THREE.PointLight(u,r,e),C.position.set(h[0],h[1],h[2])):"AmbientLight"===l.type&&(C=new THREE.AmbientLight(u)),a.add(C),C.name=q,w.lights[q]=C,w.objects[q]=C):"PerspectiveCamera"===l.type||"OrthographicCamera"===l.type?("PerspectiveCamera"===l.type?y=new THREE.PerspectiveCamera(l.fov,l.aspect,l.near,l.far):"OrthographicCamera"===
l.type&&(y=new THREE.OrthographicCamera(l.left,l.right,l.top,l.bottom,l.near,l.far)),h=l.position,y.position.set(h[0],h[1],h[2]),a.add(y),y.name=q,w.cameras[q]=y,w.objects[q]=y):(h=l.position,j=l.rotation,k=l.scale,m=l.quaternion,v=new THREE.Object3D,v.name=q,v.position.set(h[0],h[1],h[2]),m?(v.quaternion.set(m[0],m[1],m[2],m[3]),v.useQuaternion=!0):v.rotation.set(j[0],j[1],j[2]),v.scale.set(k[0],k[1],k[2]),v.visible=void 0!==l.visible?l.visible:!1,a.add(v),w.objects[q]=v,w.empties[q]=v);if(v){if(void 0!==
l.userData)for(var B in l.userData)v.userData[B]=l.userData[B];if(void 0!==l.groups)for(e=0;e<l.groups.length;e++)h=l.groups[e],void 0===w.groups[h]&&(w.groups[h]=[]),w.groups[h].push(q);void 0!==l.children&&f(v,l.children)}}}function h(a){return function(b,c){w.geometries[a]=b;w.face_materials[a]=c;e();A-=1;n.onLoadComplete();k()}}function i(a,b,c,d){return function(f){var f=f.content?f.content:f.dae?f.scene:f,h=d.position,i=d.rotation,j=d.quaternion,m=d.scale;f.position.set(h[0],h[1],h[2]);j?(f.quaternion.set(j[0],
j[1],j[2],j[3]),f.useQuaternion=!0):f.rotation.set(i[0],i[1],i[2]);f.scale.set(m[0],m[1],m[2]);c&&f.traverse(function(a){a.material=c});var l=void 0!==d.visible?d.visible:!0;f.traverse(function(a){a.visible=l});b.add(f);f.name=a;w.objects[a]=f;e();A-=1;n.onLoadComplete();k()}}function j(a){return function(b,c){w.geometries[a]=b;w.face_materials[a]=c}}function k(){n.callbackProgress({totalModels:I,totalTextures:D,loadedModels:I-A,loadedTextures:D-B},w);n.onLoadProgress();if(0===A&&0===B){for(var a=
0;a<H.length;a++){var c=H[a],d=w.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,w.scene.add(c.object.target));c.object.target.userData.targetInverse=c.object}b(w)}}var n=this,q=THREE.Loader.prototype.extractUrlBase(c),t,x,y,m,l,C,u,r,A,B,I,D,w,H=[],M=a,F;for(F in this.geometryHandlerMap)a=this.geometryHandlerMap[F].loaderClass,this.geometryHandlerMap[F].loaderObject=new a;for(F in this.hierarchyHandlerMap)a=this.hierarchyHandlerMap[F].loaderClass,this.hierarchyHandlerMap[F].loaderObject=
new a;B=A=0;w={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},empties:{},groups:{}};if(M.transform&&(F=M.transform.position,a=M.transform.rotation,c=M.transform.scale,F&&w.scene.position.set(F[0],F[1],F[2]),a&&w.scene.rotation.set(a[0],a[1],a[2]),c&&w.scene.scale.set(c[0],c[1],c[2]),F||a||c))w.scene.updateMatrix(),w.scene.updateMatrixWorld();F=function(a){return function(){B-=a;k();n.onLoadComplete()}};for(var U in M.fogs)a=M.fogs[U],
"linear"===a.type?m=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&(m=new THREE.FogExp2(0,a.density)),a=a.color,m.color.setRGB(a[0],a[1],a[2]),w.fogs[U]=m;for(var v in M.geometries)m=M.geometries[v],m.type in this.geometryHandlerMap&&(A+=1,n.onLoadStart());for(var W in M.objects)m=M.objects[W],m.type&&m.type in this.hierarchyHandlerMap&&(A+=1,n.onLoadStart());I=A;for(v in M.geometries)if(m=M.geometries[v],"cube"===m.type)t=new THREE.CubeGeometry(m.width,m.height,m.depth,m.widthSegments,m.heightSegments,
m.depthSegments),w.geometries[v]=t;else if("plane"===m.type)t=new THREE.PlaneGeometry(m.width,m.height,m.widthSegments,m.heightSegments),w.geometries[v]=t;else if("sphere"===m.type)t=new THREE.SphereGeometry(m.radius,m.widthSegments,m.heightSegments),w.geometries[v]=t;else if("cylinder"===m.type)t=new THREE.CylinderGeometry(m.topRad,m.botRad,m.height,m.radSegs,m.heightSegs),w.geometries[v]=t;else if("torus"===m.type)t=new THREE.TorusGeometry(m.radius,m.tube,m.segmentsR,m.segmentsT),w.geometries[v]=
t;else if("icosahedron"===m.type)t=new THREE.IcosahedronGeometry(m.radius,m.subdivisions),w.geometries[v]=t;else if(m.type in this.geometryHandlerMap){W={};for(l in m)"type"!==l&&"url"!==l&&(W[l]=m[l]);this.geometryHandlerMap[m.type].loaderObject.load(d(m.url,M.urlBaseType),h(v),W)}else"embedded"===m.type&&(W=M.embeds[m.id],W.metadata=M.metadata,W&&(W=this.geometryHandlerMap.ascii.loaderObject.parse(W,""),j(v)(W.geometry,W.materials)));for(var E in M.textures)if(v=M.textures[E],v.url instanceof Array){B+=
v.url.length;for(l=0;l<v.url.length;l++)n.onLoadStart()}else B+=1,n.onLoadStart();D=B;for(E in M.textures){v=M.textures[E];void 0!==v.mapping&&void 0!==THREE[v.mapping]&&(v.mapping=new THREE[v.mapping]);if(v.url instanceof Array){W=v.url.length;m=[];for(l=0;l<W;l++)m[l]=d(v.url[l],M.urlBaseType);l=(l=/\.dds$/i.test(m[0]))?THREE.ImageUtils.loadCompressedTextureCube(m,v.mapping,F(W)):THREE.ImageUtils.loadTextureCube(m,v.mapping,F(W))}else l=/\.dds$/i.test(v.url),W=d(v.url,M.urlBaseType),m=F(1),l=l?
THREE.ImageUtils.loadCompressedTexture(W,v.mapping,m):THREE.ImageUtils.loadTexture(W,v.mapping,m),void 0!==THREE[v.minFilter]&&(l.minFilter=THREE[v.minFilter]),void 0!==THREE[v.magFilter]&&(l.magFilter=THREE[v.magFilter]),v.anisotropy&&(l.anisotropy=v.anisotropy),v.repeat&&(l.repeat.set(v.repeat[0],v.repeat[1]),1!==v.repeat[0]&&(l.wrapS=THREE.RepeatWrapping),1!==v.repeat[1]&&(l.wrapT=THREE.RepeatWrapping)),v.offset&&l.offset.set(v.offset[0],v.offset[1]),v.wrap&&(W={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},
void 0!==W[v.wrap[0]]&&(l.wrapS=W[v.wrap[0]]),void 0!==W[v.wrap[1]]&&(l.wrapT=W[v.wrap[1]]));w.textures[E]=l}var R,P;for(R in M.materials){E=M.materials[R];for(P in E.parameters)"envMap"===P||"map"===P||"lightMap"===P||"bumpMap"===P?E.parameters[P]=w.textures[E.parameters[P]]:"shading"===P?E.parameters[P]="flat"===E.parameters[P]?THREE.FlatShading:THREE.SmoothShading:"side"===P?E.parameters[P]="double"==E.parameters[P]?THREE.DoubleSide:"back"==E.parameters[P]?THREE.BackSide:THREE.FrontSide:"blending"===
P?E.parameters[P]=E.parameters[P]in THREE?THREE[E.parameters[P]]:THREE.NormalBlending:"combine"===P?E.parameters[P]=E.parameters[P]in THREE?THREE[E.parameters[P]]:THREE.MultiplyOperation:"vertexColors"===P?"face"==E.parameters[P]?E.parameters[P]=THREE.FaceColors:E.parameters[P]&&(E.parameters[P]=THREE.VertexColors):"wrapRGB"===P&&(F=E.parameters[P],E.parameters[P]=new THREE.Vector3(F[0],F[1],F[2]));void 0!==E.parameters.opacity&&1>E.parameters.opacity&&(E.parameters.transparent=!0);E.parameters.normalMap?
(F=THREE.ShaderLib.normalmap,v=THREE.UniformsUtils.clone(F.uniforms),l=E.parameters.color,W=E.parameters.specular,m=E.parameters.ambient,U=E.parameters.shininess,v.tNormal.value=w.textures[E.parameters.normalMap],E.parameters.normalScale&&v.uNormalScale.value.set(E.parameters.normalScale[0],E.parameters.normalScale[1]),E.parameters.map&&(v.tDiffuse.value=E.parameters.map,v.enableDiffuse.value=!0),E.parameters.envMap&&(v.tCube.value=E.parameters.envMap,v.enableReflection.value=!0,v.uReflectivity.value=
E.parameters.reflectivity),E.parameters.lightMap&&(v.tAO.value=E.parameters.lightMap,v.enableAO.value=!0),E.parameters.specularMap&&(v.tSpecular.value=w.textures[E.parameters.specularMap],v.enableSpecular.value=!0),E.parameters.displacementMap&&(v.tDisplacement.value=w.textures[E.parameters.displacementMap],v.enableDisplacement.value=!0,v.uDisplacementBias.value=E.parameters.displacementBias,v.uDisplacementScale.value=E.parameters.displacementScale),v.uDiffuseColor.value.setHex(l),v.uSpecularColor.value.setHex(W),
v.uAmbientColor.value.setHex(m),v.uShininess.value=U,E.parameters.opacity&&(v.uOpacity.value=E.parameters.opacity),x=new THREE.ShaderMaterial({fragmentShader:F.fragmentShader,vertexShader:F.vertexShader,uniforms:v,lights:!0,fog:!0})):x=new THREE[E.type](E.parameters);w.materials[R]=x}for(R in M.materials)if(E=M.materials[R],E.parameters.materials){P=[];for(l=0;l<E.parameters.materials.length;l++)P.push(w.materials[E.parameters.materials[l]]);w.materials[R].materials=P}e();w.cameras&&M.defaults.camera&&
(w.currentCamera=w.cameras[M.defaults.camera]);w.fogs&&M.defaults.fog&&(w.scene.fog=w.fogs[M.defaults.fog]);n.callbackSync(w);k()};THREE.TextureLoader=function(){THREE.EventDispatcher.call(this);this.crossOrigin=null};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a){var b=this,c=new Image;c.addEventListener("load",function(){var a=new THREE.Texture(c);a.needsUpdate=!0;b.dispatchEvent({type:"load",content:a})},!1);c.addEventListener("error",function(){b.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);b.crossOrigin&&(c.crossOrigin=b.crossOrigin);c.src=a}};THREE.Material=function(){THREE.EventDispatcher.call(this);this.id=THREE.MaterialIdCount++;this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.overdraw=!1;this.needsUpdate=this.visible=!0};
THREE.Material.prototype.setValues=function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color&&c instanceof THREE.Color?d.copy(c):d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]=c}}};
THREE.Material.prototype.clone=function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;
a.visible=this.visible;return a};THREE.Material.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.metal=!1;this.perPixel=!0;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.perPixel=this.perPixel;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){return new THREE.MeshFaceMaterial(this.materials.slice(0))};THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone=function(){var a=new THREE.ParticleBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=new THREE.Texture;this.useScreenCoordinates=!0;this.depthTest=!this.useScreenCoordinates;this.sizeAttenuation=!this.useScreenCoordinates;this.scaleByViewport=!this.sizeAttenuation;this.alignment=THREE.SpriteAlignment.center.clone();this.fog=!1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1);this.setValues(a);a=a||{};void 0===a.depthTest&&(this.depthTest=!this.useScreenCoordinates);
void 0===a.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates);void 0===a.scaleByViewport&&(this.scaleByViewport=!this.sizeAttenuation)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.useScreenCoordinates=this.useScreenCoordinates;a.sizeAttenuation=this.sizeAttenuation;a.scaleByViewport=this.scaleByViewport;a.alignment.copy(this.alignment);a.uvOffset.copy(this.uvOffset);a.uvScale.copy(this.uvScale);a.fog=this.fog;return a};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);
THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);THREE.Texture=function(a,b,c,d,e,f,h,i,j){THREE.EventDispatcher.call(this);this.id=THREE.TextureIdCount++;this.name="";this.image=a;this.mipmaps=[];this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==j?j:1;this.format=void 0!==h?h:THREE.RGBAFormat;this.type=void 0!==i?i:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=
this.unpackAlignment;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.TextureIdCount=0;THREE.CompressedTexture=function(a,b,c,d,e,f,h,i,j,k,n){THREE.Texture.call(this,null,f,h,i,j,k,d,e,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,h,i,j,k,n){THREE.Texture.call(this,null,f,h,i,j,k,d,e,n);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=Object.create(THREE.Object3D.prototype);THREE.Particle.prototype.clone=function(a){void 0===a&&(a=new THREE.Particle(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.sortParticles=!1;this.geometry&&null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere();this.frustumCulled=!1};THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0});void 0!==this.geometry&&(null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere(),this.updateMorphTargets())};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiplyMatrices(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,f;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,f=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),b.useQuaternion=!0,void 0!==f?b.scale.set(f[0],f[1],f[2]):b.scale.set(1,1,1);for(a=
0;a<this.bones.length;a++)c=this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(4*this.boneTextureWidth*this.boneTextureHeight),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,
this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var a=0,b=this.children.length;a<b;a++){var c=this.children[a];c instanceof THREE.Bone?c.update(this.identityMatrix,!1):c.updateMatrixWorld(!0)}if(void 0==this.boneInverses){this.boneInverses=[];a=0;for(b=this.bones.length;a<
b;a++)c=new THREE.Matrix4,c.getInverse(this.bones[a].skinMatrix),this.boneInverses.push(c)}a=0;for(b=this.bones.length;a<b;a++)THREE.SkinnedMesh.offsetMatrix.multiplyMatrices(this.bones[a].skinMatrix,this.boneInverses[a]),THREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset(this.boneMatrices,16*a);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)};
THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.SkinnedMesh.offsetMatrix=new THREE.Matrix4;THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var h=a.morphTargets[e].name.match(d);if(h&&1<h.length){h=h[1];c[h]||(c[h]={start:Infinity,end:-Infinity});var i=c[h];e<i.start&&(i.start=e);e>i.end&&(i.end=e);b||(b=h)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=1E3*((c.end-c.start)/b),this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=Object.create(THREE.Object3D.prototype);THREE.Ribbon.prototype.clone=function(a){void 0===a&&(a=new THREE.Ribbon(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.LODs=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);for(var b=Math.abs(b),c=0;c<this.LODs.length&&!(b<this.LODs[c].visibleAtDistance);c++);this.LODs.splice(c,0,{visibleAtDistance:b,object3D:a});this.add(a)};
THREE.LOD.prototype.update=function(a){if(1<this.LODs.length){a.matrixWorldInverse.getInverse(a.matrixWorld);a=a.matrixWorldInverse;a=-(a.elements[2]*this.matrixWorld.elements[12]+a.elements[6]*this.matrixWorld.elements[13]+a.elements[10]*this.matrixWorld.elements[14]+a.elements[14]);this.LODs[0].object3D.visible=!0;for(var b=1;b<this.LODs.length;b++)if(a>=this.LODs[b].visibleAtDistance)this.LODs[b-1].object3D.visible=!1,this.LODs[b].object3D.visible=!0;else break;for(;b<this.LODs.length;b++)this.LODs[b].object3D.visible=
!1}};THREE.LOD.prototype.clone=function(){};THREE.Sprite=function(a){THREE.Object3D.call(this);this.material=void 0!==a?a:new THREE.SpriteMaterial;this.rotation3d=this.rotation;this.rotation=0};THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);(1!==this.scale.x||1!==this.scale.y)&&this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -viewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;\nelse shadowKernel[0][0] = 0.0;\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;\nelse shadowKernel[0][1] = 0.0;\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;\nelse shadowKernel[0][2] = 0.0;\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;\nelse shadowKernel[1][0] = 0.0;\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;\nelse shadowKernel[1][1] = 0.0;\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;\nelse shadowKernel[1][2] = 0.0;\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;\nelse shadowKernel[2][0] = 0.0;\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;\nelse shadowKernel[2][1] = 0.0;\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;\nelse shadowKernel[2][2] = 0.0;\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,
THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,
THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",
value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",
value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}",
fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},
tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},
uRefractionRatio:{type:"f",value:0.98},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};THREE.WebGLRenderer=function(a){function b(a){if(a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)g.deleteBuffer(a.__webglCustomAttributesList[b].buffer)}function c(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var h=1;"v2"===f.type?h=2:"v3"===f.type?h=3:"v4"===f.type?
h=4:"c"===f.type&&(h=3);f.size=h;f.array=new Float32Array(c*h);f.buffer=g.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}function d(a,b){var c=b.geometry,d=a.faces3,i=a.faces4,j=3*d.length+4*i.length,k=1*d.length+2*i.length,i=3*d.length+4*i.length,d=e(b,a),m=h(d),l=f(d),q=d.vertexColors?d.vertexColors:!1;a.__vertexArray=new Float32Array(3*j);l&&(a.__normalArray=new Float32Array(3*j));c.hasTangents&&(a.__tangentArray=new Float32Array(4*j));q&&
(a.__colorArray=new Float32Array(3*j));if(m){if(0<c.faceUvs.length||0<c.faceVertexUvs.length)a.__uvArray=new Float32Array(2*j);if(1<c.faceUvs.length||1<c.faceVertexUvs.length)a.__uv2Array=new Float32Array(2*j)}b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&(a.__skinIndexArray=new Float32Array(4*j),a.__skinWeightArray=new Float32Array(4*j));a.__faceArray=new Uint16Array(3*k);a.__lineArray=new Uint16Array(2*i);if(a.numMorphTargets){a.__morphTargetsArrays=[];c=0;for(m=a.numMorphTargets;c<
m;c++)a.__morphTargetsArrays.push(new Float32Array(3*j))}if(a.numMorphNormals){a.__morphNormalsArrays=[];c=0;for(m=a.numMorphNormals;c<m;c++)a.__morphNormalsArrays.push(new Float32Array(3*j))}a.__webglFaceCount=3*k;a.__webglLineCount=2*i;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var n in d.attributes){var k=d.attributes[n],c={},t;for(t in k)c[t]=k[t];if(!c.__webglInitialized||c.createUniqueBuffers)c.__webglInitialized=!0,i=1,"v2"===c.type?i=2:
"v3"===c.type?i=3:"v4"===c.type?i=4:"c"===c.type&&(i=3),c.size=i,c.array=new Float32Array(j*i),c.buffer=g.createBuffer(),c.buffer.belongsToAttribute=n,k.needsUpdate=!0,c.__original=k;a.__webglCustomAttributesList.push(c)}}a.__inittedArrays=!0}function e(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material}function f(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===
THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function h(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function i(a){pb[a]||(g.enableVertexAttribArray(a),pb[a]=!0)}function j(){for(var a in pb)pb[a]&&(g.disableVertexAttribArray(a),pb[a]=!1)}function k(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}function n(a,b){return b[0]-a[0]}function q(a,b,c){if(a.length)for(var d=0,g=a.length;d<g;d++)sa=Xb=null,Yb=Ta=X=ta=Wa=Qa=ga=-1,Pb=!0,a[d].render(b,
c,Tc,Uc),sa=Xb=null,Yb=Ta=X=ta=Wa=Qa=ga=-1,Pb=!0}function t(a,b,c,d,g,e,f,h){var i,j,k,m;b?(j=a.length-1,m=b=-1):(j=0,b=a.length,m=1);for(var l=j;l!==b;l+=m)if(i=a[l],i.render){j=i.object;k=i.buffer;if(h)i=h;else{i=i[c];if(!i)continue;f&&N.setBlending(i.blending,i.blendEquation,i.blendSrc,i.blendDst);N.setDepthTest(i.depthTest);N.setDepthWrite(i.depthWrite);H(i.polygonOffset,i.polygonOffsetFactor,i.polygonOffsetUnits)}N.setMaterialFaces(i);k instanceof THREE.BufferGeometry?N.renderBufferDirect(d,
g,e,i,k,j):N.renderBuffer(d,g,e,i,k,j)}}function x(a,b,c,d,g,e,f){for(var h,i,j=0,k=a.length;j<k;j++)if(h=a[j],i=h.object,i.visible){if(f)h=f;else{h=h[b];if(!h)continue;e&&N.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);N.setDepthTest(h.depthTest);N.setDepthWrite(h.depthWrite);H(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}N.renderImmediateObject(c,d,g,h,i)}}function y(a,b,c){a.push({buffer:b,object:c,opaque:null,transparent:null})}function m(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;
return!1}function l(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function C(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function u(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function r(a,b,c,d,e){ya=0;d.needsUpdate&&(d.program&&Vc(d),N.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(N.maxMorphTargets));var f=!1,h=d.program,i=h.uniforms,j=d.uniforms;h!==Xb&&
(g.useProgram(h),Xb=h,f=!0);d.id!==Yb&&(Yb=d.id,f=!0);if(f||a!==sa)g.uniformMatrix4fv(i.projectionMatrix,!1,a.projectionMatrix.elements),a!==sa&&(sa=a);if(d.skinning)if(ic&&e.useVertexTexture){if(null!==i.boneTexture){var k=A();g.uniform1i(i.boneTexture,k);N.setTexture(e.boneTexture,k)}}else null!==i.boneGlobalMatrices&&g.uniformMatrix4fv(i.boneGlobalMatrices,!1,e.boneMatrices);if(f){c&&d.fog&&(j.fogColor.value=c.color,c instanceof THREE.Fog?(j.fogNear.value=c.near,j.fogFar.value=c.far):c instanceof
THREE.FogExp2&&(j.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(Pb){for(var m,l=k=0,q=0,n,t,v,r=Ac,u=r.directional.colors,x=r.directional.positions,w=r.point.colors,y=r.point.positions,C=r.point.distances,B=r.spot.colors,F=r.spot.positions,M=r.spot.distances,H=r.spot.directions,P=r.spot.anglesCos,W=r.spot.exponents,X=r.hemi.skyColors,ga=r.hemi.groundColors,ja=r.hemi.positions,pa=0,ha=0,ca=0,fa=0,oa=0,Ca=0,ta=0,Da=0,Ma=m=
0,c=v=Ma=0,f=b.length;c<f;c++)m=b[c],m.onlyShadow||(n=m.color,t=m.intensity,v=m.distance,m instanceof THREE.AmbientLight?m.visible&&(N.gammaInput?(k+=n.r*n.r,l+=n.g*n.g,q+=n.b*n.b):(k+=n.r,l+=n.g,q+=n.b)):m instanceof THREE.DirectionalLight?(oa+=1,m.visible&&(za.getPositionFromMatrix(m.matrixWorld),Fa.getPositionFromMatrix(m.target.matrixWorld),za.sub(Fa),za.normalize(),0===za.x&&0===za.y&&0===za.z||(m=3*pa,x[m]=za.x,x[m+1]=za.y,x[m+2]=za.z,N.gammaInput?I(u,m,n,t*t):D(u,m,n,t),pa+=1))):m instanceof
THREE.PointLight?(Ca+=1,m.visible&&(Ma=3*ha,N.gammaInput?I(w,Ma,n,t*t):D(w,Ma,n,t),Fa.getPositionFromMatrix(m.matrixWorld),y[Ma]=Fa.x,y[Ma+1]=Fa.y,y[Ma+2]=Fa.z,C[ha]=v,ha+=1)):m instanceof THREE.SpotLight?(ta+=1,m.visible&&(Ma=3*ca,N.gammaInput?I(B,Ma,n,t*t):D(B,Ma,n,t),Fa.getPositionFromMatrix(m.matrixWorld),F[Ma]=Fa.x,F[Ma+1]=Fa.y,F[Ma+2]=Fa.z,M[ca]=v,za.copy(Fa),Fa.getPositionFromMatrix(m.target.matrixWorld),za.sub(Fa),za.normalize(),H[Ma]=za.x,H[Ma+1]=za.y,H[Ma+2]=za.z,P[ca]=Math.cos(m.angle),
W[ca]=m.exponent,ca+=1)):m instanceof THREE.HemisphereLight&&(Da+=1,m.visible&&(za.getPositionFromMatrix(m.matrixWorld),za.normalize(),0===za.x&&0===za.y&&0===za.z||(v=3*fa,ja[v]=za.x,ja[v+1]=za.y,ja[v+2]=za.z,n=m.color,m=m.groundColor,N.gammaInput?(t*=t,I(X,v,n,t),I(ga,v,m,t)):(D(X,v,n,t),D(ga,v,m,t)),fa+=1))));c=3*pa;for(f=Math.max(u.length,3*oa);c<f;c++)u[c]=0;c=3*ha;for(f=Math.max(w.length,3*Ca);c<f;c++)w[c]=0;c=3*ca;for(f=Math.max(B.length,3*ta);c<f;c++)B[c]=0;c=3*fa;for(f=Math.max(X.length,
3*Da);c<f;c++)X[c]=0;c=3*fa;for(f=Math.max(ga.length,3*Da);c<f;c++)ga[c]=0;r.directional.length=pa;r.point.length=ha;r.spot.length=ca;r.hemi.length=fa;r.ambient[0]=k;r.ambient[1]=l;r.ambient[2]=q;Pb=!1}c=Ac;j.ambientLightColor.value=c.ambient;j.directionalLightColor.value=c.directional.colors;j.directionalLightDirection.value=c.directional.positions;j.pointLightColor.value=c.point.colors;j.pointLightPosition.value=c.point.positions;j.pointLightDistance.value=c.point.distances;j.spotLightColor.value=
c.spot.colors;j.spotLightPosition.value=c.spot.positions;j.spotLightDistance.value=c.spot.distances;j.spotLightDirection.value=c.spot.directions;j.spotLightAngleCos.value=c.spot.anglesCos;j.spotLightExponent.value=c.spot.exponents;j.hemisphereLightSkyColor.value=c.hemi.skyColors;j.hemisphereLightGroundColor.value=c.hemi.groundColors;j.hemisphereLightDirection.value=c.hemi.positions}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){j.opacity.value=
d.opacity;N.gammaInput?j.diffuse.value.copyGammaToLinear(d.color):j.diffuse.value=d.color;j.map.value=d.map;j.lightMap.value=d.lightMap;j.specularMap.value=d.specularMap;d.bumpMap&&(j.bumpMap.value=d.bumpMap,j.bumpScale.value=d.bumpScale);d.normalMap&&(j.normalMap.value=d.normalMap,j.normalScale.value.copy(d.normalScale));var Ga;d.map?Ga=d.map:d.specularMap?Ga=d.specularMap:d.normalMap?Ga=d.normalMap:d.bumpMap&&(Ga=d.bumpMap);void 0!==Ga&&(c=Ga.offset,Ga=Ga.repeat,j.offsetRepeat.value.set(c.x,c.y,
Ga.x,Ga.y));j.envMap.value=d.envMap;j.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;j.reflectivity.value=d.reflectivity;j.refractionRatio.value=d.refractionRatio;j.combine.value=d.combine;j.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof THREE.LineBasicMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity,j.dashSize.value=d.dashSize,
j.totalSize.value=d.dashSize+d.gapSize,j.scale.value=d.scale):d instanceof THREE.ParticleBasicMaterial?(j.psColor.value=d.color,j.opacity.value=d.opacity,j.size.value=d.size,j.scale.value=R.height/2,j.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(j.shininess.value=d.shininess,N.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive),j.specular.value.copyGammaToLinear(d.specular)):(j.ambient.value=d.ambient,j.emissive.value=d.emissive,j.specular.value=
d.specular),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(N.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive)):(j.ambient.value=d.ambient,j.emissive.value=d.emissive),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(j.mNear.value=a.near,j.mFar.value=a.far,j.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(j.opacity.value=d.opacity);if(e.receiveShadow&&
!d._shadowPass&&j.shadowMatrix){c=Ga=0;for(f=b.length;c<f;c++)if(k=b[c],k.castShadow&&(k instanceof THREE.SpotLight||k instanceof THREE.DirectionalLight&&!k.shadowCascade))j.shadowMap.value[Ga]=k.shadowMap,j.shadowMapSize.value[Ga]=k.shadowMapSize,j.shadowMatrix.value[Ga]=k.shadowMatrix,j.shadowDarkness.value[Ga]=k.shadowDarkness,j.shadowBias.value[Ga]=k.shadowBias,Ga++}b=d.uniformsList;j=0;for(Ga=b.length;j<Ga;j++)if(f=h.uniforms[b[j][1]])if(c=b[j][0],l=c.type,k=c.value,"i"===l)g.uniform1i(f,k);
else if("f"===l)g.uniform1f(f,k);else if("v2"===l)g.uniform2f(f,k.x,k.y);else if("v3"===l)g.uniform3f(f,k.x,k.y,k.z);else if("v4"===l)g.uniform4f(f,k.x,k.y,k.z,k.w);else if("c"===l)g.uniform3f(f,k.r,k.g,k.b);else if("iv1"===l)g.uniform1iv(f,k);else if("iv"===l)g.uniform3iv(f,k);else if("fv1"===l)g.uniform1fv(f,k);else if("fv"===l)g.uniform3fv(f,k);else if("v2v"===l){void 0===c._array&&(c._array=new Float32Array(2*k.length));l=0;for(q=k.length;l<q;l++)r=2*l,c._array[r]=k[l].x,c._array[r+1]=k[l].y;
g.uniform2fv(f,c._array)}else if("v3v"===l){void 0===c._array&&(c._array=new Float32Array(3*k.length));l=0;for(q=k.length;l<q;l++)r=3*l,c._array[r]=k[l].x,c._array[r+1]=k[l].y,c._array[r+2]=k[l].z;g.uniform3fv(f,c._array)}else if("v4v"===l){void 0===c._array&&(c._array=new Float32Array(4*k.length));l=0;for(q=k.length;l<q;l++)r=4*l,c._array[r]=k[l].x,c._array[r+1]=k[l].y,c._array[r+2]=k[l].z,c._array[r+3]=k[l].w;g.uniform4fv(f,c._array)}else if("m4"===l)void 0===c._array&&(c._array=new Float32Array(16)),
k.flattenToArray(c._array),g.uniformMatrix4fv(f,!1,c._array);else if("m4v"===l){void 0===c._array&&(c._array=new Float32Array(16*k.length));l=0;for(q=k.length;l<q;l++)k[l].flattenToArrayOffset(c._array,16*l);g.uniformMatrix4fv(f,!1,c._array)}else if("t"===l){if(r=k,k=A(),g.uniform1i(f,k),r)if(r.image instanceof Array&&6===r.image.length){if(c=r,f=k,6===c.image.length)if(c.needsUpdate){c.image.__webglTextureCube||(c.image.__webglTextureCube=g.createTexture(),N.info.memory.textures++);g.activeTexture(g.TEXTURE0+
f);g.bindTexture(g.TEXTURE_CUBE_MAP,c.image.__webglTextureCube);g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,c.flipY);f=c instanceof THREE.CompressedTexture;k=[];for(l=0;6>l;l++)q=k,r=l,N.autoScaleCubemaps&&!f?(u=c.image[l],w=od,u.width<=w&&u.height<=w||(y=Math.max(u.width,u.height),x=Math.floor(u.width*w/y),w=Math.floor(u.height*w/y),y=document.createElement("canvas"),y.width=x,y.height=w,y.getContext("2d").drawImage(u,0,0,u.width,u.height,0,0,x,w),u=y)):u=c.image[l],q[r]=u;l=k[0];q=0===(l.width&l.width-
1)&&0===(l.height&l.height-1);r=E(c.format);u=E(c.type);U(g.TEXTURE_CUBE_MAP,c,q);for(l=0;6>l;l++)if(f){w=k[l].mipmaps;y=0;for(C=w.length;y<C;y++)x=w[y],g.compressedTexImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+l,y,r,x.width,x.height,0,x.data)}else g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+l,0,r,r,u,k[l]);c.generateMipmaps&&q&&g.generateMipmap(g.TEXTURE_CUBE_MAP);c.needsUpdate=!1;if(c.onUpdate)c.onUpdate()}else g.activeTexture(g.TEXTURE0+f),g.bindTexture(g.TEXTURE_CUBE_MAP,c.image.__webglTextureCube)}else r instanceof
THREE.WebGLRenderTargetCube?(c=r,g.activeTexture(g.TEXTURE0+k),g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture)):N.setTexture(r,k)}else if("tv"===l){void 0===c._array&&(c._array=[]);l=0;for(q=c.value.length;l<q;l++)c._array[l]=A();g.uniform1iv(f,c._array);l=0;for(q=c.value.length;l<q;l++)r=c.value[l],k=c._array[l],r&&N.setTexture(r,k)}if((d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==i.cameraPosition)Fa.getPositionFromMatrix(a.matrixWorld),g.uniform3f(i.cameraPosition,
Fa.x,Fa.y,Fa.z);(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==i.viewMatrix&&g.uniformMatrix4fv(i.viewMatrix,!1,a.matrixWorldInverse.elements)}g.uniformMatrix4fv(i.modelViewMatrix,!1,e._modelViewMatrix.elements);i.normalMatrix&&g.uniformMatrix3fv(i.normalMatrix,!1,e._normalMatrix.elements);null!==i.modelMatrix&&g.uniformMatrix4fv(i.modelMatrix,!1,e.matrixWorld.elements);return h}function A(){var a=ya;a>=Bc&&console.warn("WebGLRenderer: trying to use "+
a+" texture units while this GPU supports only "+Bc);ya+=1;return a}function B(a,b){a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getInverse(a._modelViewMatrix);a._normalMatrix.transpose()}function I(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function D(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function w(a){a!==tb&&(g.lineWidth(a),tb=a)}function H(a,b,c){ha!==a&&(a?g.enable(g.POLYGON_OFFSET_FILL):g.disable(g.POLYGON_OFFSET_FILL),ha=a);
if(a&&(Zb!==b||sb!==c))g.polygonOffset(b,c),Zb=b,sb=c}function M(a){for(var a=a.split("\n"),b=0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function F(a,b){var c;"fragment"===a?c=g.createShader(g.FRAGMENT_SHADER):"vertex"===a&&(c=g.createShader(g.VERTEX_SHADER));g.shaderSource(c,b);g.compileShader(c);return!g.getShaderParameter(c,g.COMPILE_STATUS)?(console.error(g.getShaderInfoLog(c)),console.error(M(b)),null):c}function U(a,b,c){c?(g.texParameteri(a,g.TEXTURE_WRAP_S,E(b.wrapS)),g.texParameteri(a,
g.TEXTURE_WRAP_T,E(b.wrapT)),g.texParameteri(a,g.TEXTURE_MAG_FILTER,E(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,E(b.minFilter))):(g.texParameteri(a,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_MAG_FILTER,W(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,W(b.minFilter)));if(ub&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy))g.texParameterf(a,ub.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,Cc)),b.__oldAnisotropy=
b.anisotropy}function v(a,b){g.bindRenderbuffer(g.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_COMPONENT16,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_STENCIL,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_STENCIL_ATTACHMENT,g.RENDERBUFFER,a)):g.renderbufferStorage(g.RENDERBUFFER,g.RGBA4,b.width,b.height)}
function W(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?g.NEAREST:g.LINEAR}function E(a){if(a===THREE.RepeatWrapping)return g.REPEAT;if(a===THREE.ClampToEdgeWrapping)return g.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return g.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return g.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return g.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return g.NEAREST_MIPMAP_LINEAR;if(a===
THREE.LinearFilter)return g.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return g.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return g.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return g.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return g.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return g.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return g.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return g.BYTE;if(a===THREE.ShortType)return g.SHORT;if(a===
THREE.UnsignedShortType)return g.UNSIGNED_SHORT;if(a===THREE.IntType)return g.INT;if(a===THREE.UnsignedIntType)return g.UNSIGNED_INT;if(a===THREE.FloatType)return g.FLOAT;if(a===THREE.AlphaFormat)return g.ALPHA;if(a===THREE.RGBFormat)return g.RGB;if(a===THREE.RGBAFormat)return g.RGBA;if(a===THREE.LuminanceFormat)return g.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return g.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return g.FUNC_ADD;if(a===THREE.SubtractEquation)return g.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return g.FUNC_REVERSE_SUBTRACT;
if(a===THREE.ZeroFactor)return g.ZERO;if(a===THREE.OneFactor)return g.ONE;if(a===THREE.SrcColorFactor)return g.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return g.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return g.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return g.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return g.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return g.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return g.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return g.ONE_MINUS_DST_COLOR;
if(a===THREE.SrcAlphaSaturateFactor)return g.SRC_ALPHA_SATURATE;if(void 0!==qb){if(a===THREE.RGB_S3TC_DXT1_Format)return qb.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return qb.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return qb.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return qb.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);var a=a||{},R=void 0!==a.canvas?a.canvas:document.createElement("canvas"),
P=void 0!==a.precision?a.precision:"highp",Ca=void 0!==a.alpha?a.alpha:!0,ca=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,oa=void 0!==a.antialias?a.antialias:!1,nb=void 0!==a.stencil?a.stencil:!0,jb=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,fa=void 0!==a.clearColor?new THREE.Color(a.clearColor):new THREE.Color(0),bb=void 0!==a.clearAlpha?a.clearAlpha:0;this.domElement=R;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==window.devicePixelRatio?
window.devicePixelRatio:1;this.autoUpdateScene=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=
[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var N=this,Ua=[],kb=0,Xb=null,Sc=null,Yb=-1,Ta=null,sa=null,cb=0,ya=0,ta=-1,X=-1,ga=-1,Da=-1,ja=-1,pa=-1,Qa=-1,Wa=-1,ha=null,Zb=null,sb=null,tb=null,ob=0,$b=0,qc=0,hc=0,Tc=0,Uc=0,pb={},jc=new THREE.Frustum,Wc=new THREE.Matrix4,pd=new THREE.Matrix4,Fa=new THREE.Vector3,za=new THREE.Vector3,Pb=!0,Ac={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,
colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},g,kc,Dc,ub,qb;try{if(!(g=R.getContext("experimental-webgl",{alpha:Ca,premultipliedAlpha:ca,antialias:oa,stencil:nb,preserveDrawingBuffer:jb})))throw"Error creating WebGL context.";}catch(qd){console.error(qd)}kc=g.getExtension("OES_texture_float");Dc=g.getExtension("OES_standard_derivatives");ub=g.getExtension("EXT_texture_filter_anisotropic")||
g.getExtension("MOZ_EXT_texture_filter_anisotropic")||g.getExtension("WEBKIT_EXT_texture_filter_anisotropic");qb=g.getExtension("WEBGL_compressed_texture_s3tc")||g.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");kc||console.log("THREE.WebGLRenderer: Float textures not supported.");Dc||console.log("THREE.WebGLRenderer: Standard derivatives not supported.");ub||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
qb||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");void 0===g.getShaderPrecisionFormat&&(g.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});g.clearColor(0,0,0,1);g.clearDepth(1);g.clearStencil(0);g.enable(g.DEPTH_TEST);g.depthFunc(g.LEQUAL);g.frontFace(g.CCW);g.cullFace(g.BACK);g.enable(g.CULL_FACE);g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);g.clearColor(fa.r,fa.g,fa.b,bb);this.context=g;
var Bc=g.getParameter(g.MAX_TEXTURE_IMAGE_UNITS),a=g.getParameter(g.MAX_VERTEX_TEXTURE_IMAGE_UNITS);g.getParameter(g.MAX_TEXTURE_SIZE);var od=g.getParameter(g.MAX_CUBE_MAP_TEXTURE_SIZE),Cc=ub?g.getParameter(ub.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,rc=0<a,ic=rc&&kc;qb&&g.getParameter(g.COMPRESSED_TEXTURE_FORMATS);ca=g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.HIGH_FLOAT);a=g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.MEDIUM_FLOAT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.LOW_FLOAT);oa=g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,
g.HIGH_FLOAT);Ca=g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.MEDIUM_FLOAT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.LOW_FLOAT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.HIGH_INT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.MEDIUM_INT);g.getShaderPrecisionFormat(g.VERTEX_SHADER,g.LOW_INT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.HIGH_INT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.MEDIUM_INT);g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.LOW_INT);ca=0<ca.precision&&0<oa.precision;
a=0<a.precision&&0<Ca.precision;"highp"===P&&!ca&&(a?(P="mediump",console.warn("WebGLRenderer: highp not supported, using mediump")):(P="lowp",console.warn("WebGLRenderer: highp and mediump not supported, using lowp")));"mediump"===P&&!a&&(P="lowp",console.warn("WebGLRenderer: mediump not supported, using lowp"));this.getContext=function(){return g};this.supportsVertexTextures=function(){return rc};this.supportsFloatTextures=function(){return kc};this.supportsStandardDerivatives=function(){return Dc};
this.supportsCompressedTextureS3TC=function(){return qb};this.getMaxAnisotropy=function(){return Cc};this.getPrecision=function(){return P};this.setSize=function(a,b){R.width=a*this.devicePixelRatio;R.height=b*this.devicePixelRatio;R.style.width=a+"px";R.style.height=b+"px";this.setViewport(0,0,R.width,R.height)};this.setViewport=function(a,b,c,d){ob=void 0!==a?a:0;$b=void 0!==b?b:0;qc=void 0!==c?c:R.width;hc=void 0!==d?d:R.height;g.viewport(ob,$b,qc,hc)};this.setScissor=function(a,b,c,d){g.scissor(a,
b,c,d)};this.enableScissorTest=function(a){a?g.enable(g.SCISSOR_TEST):g.disable(g.SCISSOR_TEST)};this.setClearColorHex=function(a,b){fa.setHex(a);bb=b;g.clearColor(fa.r,fa.g,fa.b,bb)};this.setClearColor=function(a,b){fa.copy(a);bb=b;g.clearColor(fa.r,fa.g,fa.b,bb)};this.getClearColor=function(){return fa};this.getClearAlpha=function(){return bb};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=g.COLOR_BUFFER_BIT;if(void 0===b||b)d|=g.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=g.STENCIL_BUFFER_BIT;
g.clear(d)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=function(a,b){Xb=null;Yb=Ta=Wa=Qa=ga=-1;Pb=!0;X=ta=-1;this.shadowMapPlugin.update(a,b)};var yd=function(a){a=a.target;a.removeEventListener("dispose",yd);a.__webglInit=void 0;void 0!==a.__webglVertexBuffer&&g.deleteBuffer(a.__webglVertexBuffer);
void 0!==a.__webglNormalBuffer&&g.deleteBuffer(a.__webglNormalBuffer);void 0!==a.__webglTangentBuffer&&g.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&g.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&g.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&g.deleteBuffer(a.__webglUV2Buffer);void 0!==a.__webglSkinIndicesBuffer&&g.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&g.deleteBuffer(a.__webglSkinWeightsBuffer);void 0!==
a.__webglFaceBuffer&&g.deleteBuffer(a.__webglFaceBuffer);void 0!==a.__webglLineBuffer&&g.deleteBuffer(a.__webglLineBuffer);void 0!==a.__webglLineDistanceBuffer&&g.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.geometryGroups)for(var c in a.geometryGroups){var d=a.geometryGroups[c];if(void 0!==d.numMorphTargets)for(var e=0,f=d.numMorphTargets;e<f;e++)g.deleteBuffer(d.__webglMorphTargetsBuffers[e]);if(void 0!==d.numMorphNormals){e=0;for(f=d.numMorphNormals;e<f;e++)g.deleteBuffer(d.__webglMorphNormalsBuffers[e])}b(d)}b(a);
N.info.memory.geometries--},Ec=function(a){a=a.target;a.removeEventListener("dispose",Ec);a.image&&a.image.__webglTextureCube?g.deleteTexture(a.image.__webglTextureCube):a.__webglInit&&(a.__webglInit=!1,g.deleteTexture(a.__webglTexture));N.info.memory.textures--},Xc=function(a){a=a.target;a.removeEventListener("dispose",Xc);if(a&&a.__webglTexture)if(g.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)g.deleteFramebuffer(a.__webglFramebuffer[b]),g.deleteRenderbuffer(a.__webglRenderbuffer[b]);
else g.deleteFramebuffer(a.__webglFramebuffer),g.deleteRenderbuffer(a.__webglRenderbuffer);N.info.memory.textures--},Yc=function(a){a=a.target;a.removeEventListener("dispose",Yc);Vc(a)},Vc=function(a){var b=a.program;if(void 0!==b){a.program=void 0;var c,d,e=!1,a=0;for(c=Ua.length;a<c;a++)if(d=Ua[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=Ua.length;a<c;a++)d=Ua[a],d.program!==b&&e.push(d);Ua=e;g.deleteProgram(b);N.info.memory.programs--}}};this.renderBufferImmediate=
function(a,b,c){a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=g.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=g.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=g.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=g.createBuffer());a.hasPositions&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,a.positionArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.position),g.vertexAttribPointer(b.attributes.position,
3,g.FLOAT,!1,0,0));if(a.hasNormals){g.bindBuffer(g.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,f,h,i,j,k,l,m,q,n,t=3*a.count;for(n=0;n<t;n+=9)q=a.normalArray,d=q[n],e=q[n+1],f=q[n+2],h=q[n+3],j=q[n+4],l=q[n+5],i=q[n+6],k=q[n+7],m=q[n+8],d=(d+h+i)/3,e=(e+j+k)/3,f=(f+l+m)/3,q[n]=d,q[n+1]=e,q[n+2]=f,q[n+3]=d,q[n+4]=e,q[n+5]=f,q[n+6]=d,q[n+7]=e,q[n+8]=f}g.bufferData(g.ARRAY_BUFFER,a.normalArray,g.DYNAMIC_DRAW);g.enableVertexAttribArray(b.attributes.normal);g.vertexAttribPointer(b.attributes.normal,
3,g.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglUvBuffer),g.bufferData(g.ARRAY_BUFFER,a.uvArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.uv),g.vertexAttribPointer(b.attributes.uv,2,g.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,a.colorArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.color),g.vertexAttribPointer(b.attributes.color,3,g.FLOAT,!1,0,0));g.drawArrays(g.TRIANGLES,
0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){if(!1!==d.visible){var h,k,l;h=r(a,b,c,d,f);a=h.attributes;b=e.attributes;c=!1;h=16777215*e.id+2*h.id+(d.wireframe?1:0);h!==Ta&&(Ta=h,c=!0);c&&j();if(f instanceof THREE.Mesh)if(d=b.index){e=e.offsets;1<e.length&&(c=!0);for(var m=0,q=e.length;m<q;m++){var n=e[m].index;if(c){for(k in b)"index"!==k&&(h=a[k],f=b[k],l=f.itemSize,0<=h&&(g.bindBuffer(g.ARRAY_BUFFER,f.buffer),i(h),g.vertexAttribPointer(h,l,g.FLOAT,!1,0,4*n*l)));g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,
d.buffer)}g.drawElements(g.TRIANGLES,e[m].count,g.UNSIGNED_SHORT,2*e[m].start);N.info.render.calls++;N.info.render.vertices+=e[m].count;N.info.render.faces+=e[m].count/3}}else{if(c)for(k in b)"index"!==k&&(h=a[k],f=b[k],l=f.itemSize,0<=h&&(g.bindBuffer(g.ARRAY_BUFFER,f.buffer),i(h),g.vertexAttribPointer(h,l,g.FLOAT,!1,0,0)));k=e.attributes.position;g.drawArrays(g.TRIANGLES,0,k.numItems/3);N.info.render.calls++;N.info.render.vertices+=k.numItems/3;N.info.render.faces+=k.numItems/3/3}else if(f instanceof
THREE.ParticleSystem){if(c){for(k in b)h=a[k],f=b[k],l=f.itemSize,0<=h&&(g.bindBuffer(g.ARRAY_BUFFER,f.buffer),i(h),g.vertexAttribPointer(h,l,g.FLOAT,!1,0,0));k=b.position;g.drawArrays(g.POINTS,0,k.numItems/3);N.info.render.calls++;N.info.render.points+=k.numItems/3}}else if(f instanceof THREE.Line&&c){for(k in b)h=a[k],f=b[k],l=f.itemSize,0<=h&&(g.bindBuffer(g.ARRAY_BUFFER,f.buffer),i(h),g.vertexAttribPointer(h,l,g.FLOAT,!1,0,0));w(d.linewidth);k=b.position;g.drawArrays(g.LINE_STRIP,0,k.numItems/
3);N.info.render.calls++;N.info.render.points+=k.numItems}}};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){var h,k,c=r(a,b,c,d,f),a=c.attributes,b=!1,c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==Ta&&(Ta=c,b=!0);b&&j();if(!d.morphTargets&&0<=a.position)b&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),i(a.position),g.vertexAttribPointer(a.position,3,g.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase&&0<=c.position?(g.bindBuffer(g.ARRAY_BUFFER,
e.__webglMorphTargetsBuffers[f.morphTargetBase]),i(c.position),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0)):0<=c.position&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),i(c.position),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){var l=0;k=f.morphTargetForcedOrder;for(h=f.morphTargetInfluences;l<d.numSupportedMorphTargets&&l<k.length;)0<=c["morphTarget"+l]&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[k[l]]),i(c["morphTarget"+l]),
g.vertexAttribPointer(c["morphTarget"+l],3,g.FLOAT,!1,0,0)),0<=c["morphNormal"+l]&&d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[k[l]]),i(c["morphNormal"+l]),g.vertexAttribPointer(c["morphNormal"+l],3,g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[l]=h[k[l]],l++}else{k=[];h=f.morphTargetInfluences;var m,q=h.length;for(m=0;m<q;m++)l=h[m],0<l&&k.push([l,m]);k.length>d.numSupportedMorphTargets?(k.sort(n),k.length=d.numSupportedMorphTargets):k.length>d.numSupportedMorphNormals?
k.sort(n):0===k.length&&k.push([0,0]);for(l=0;l<d.numSupportedMorphTargets;)k[l]?(m=k[l][1],0<=c["morphTarget"+l]&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[m]),i(c["morphTarget"+l]),g.vertexAttribPointer(c["morphTarget"+l],3,g.FLOAT,!1,0,0)),0<=c["morphNormal"+l]&&d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[m]),i(c["morphNormal"+l]),g.vertexAttribPointer(c["morphNormal"+l],3,g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[l]=h[m]):f.__webglMorphTargetInfluences[l]=
0,l++}null!==d.program.uniforms.morphTargetInfluences&&g.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(b){if(e.__webglCustomAttributesList){h=0;for(k=e.__webglCustomAttributesList.length;h<k;h++)c=e.__webglCustomAttributesList[h],0<=a[c.buffer.belongsToAttribute]&&(g.bindBuffer(g.ARRAY_BUFFER,c.buffer),i(a[c.buffer.belongsToAttribute]),g.vertexAttribPointer(a[c.buffer.belongsToAttribute],c.size,g.FLOAT,!1,0,0))}0<=a.color&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglColorBuffer),
i(a.color),g.vertexAttribPointer(a.color,3,g.FLOAT,!1,0,0));0<=a.normal&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglNormalBuffer),i(a.normal),g.vertexAttribPointer(a.normal,3,g.FLOAT,!1,0,0));0<=a.tangent&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglTangentBuffer),i(a.tangent),g.vertexAttribPointer(a.tangent,4,g.FLOAT,!1,0,0));0<=a.uv&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUVBuffer),i(a.uv),g.vertexAttribPointer(a.uv,2,g.FLOAT,!1,0,0));0<=a.uv2&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUV2Buffer),i(a.uv2),g.vertexAttribPointer(a.uv2,
2,g.FLOAT,!1,0,0));d.skinning&&(0<=a.skinIndex&&0<=a.skinWeight)&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),i(a.skinIndex),g.vertexAttribPointer(a.skinIndex,4,g.FLOAT,!1,0,0),g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),i(a.skinWeight),g.vertexAttribPointer(a.skinWeight,4,g.FLOAT,!1,0,0));0<=a.lineDistance&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglLineDistanceBuffer),i(a.lineDistance),g.vertexAttribPointer(a.lineDistance,1,g.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?
(w(d.wireframeLinewidth),b&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),g.drawElements(g.LINES,e.__webglLineCount,g.UNSIGNED_SHORT,0)):(b&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),g.drawElements(g.TRIANGLES,e.__webglFaceCount,g.UNSIGNED_SHORT,0)),N.info.render.calls++,N.info.render.vertices+=e.__webglFaceCount,N.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?g.LINE_STRIP:g.LINES,w(d.linewidth),g.drawArrays(f,0,e.__webglLineCount),
N.info.render.calls++):f instanceof THREE.ParticleSystem?(g.drawArrays(g.POINTS,0,e.__webglParticleCount),N.info.render.calls++,N.info.render.points+=e.__webglParticleCount):f instanceof THREE.Ribbon&&(g.drawArrays(g.TRIANGLE_STRIP,0,e.__webglVertexCount),N.info.render.calls++)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var e,f,h,i,j=a.__lights,l=a.fog;Yb=-1;Pb=!0;this.autoUpdateScene&&
a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);Wc.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);jc.setFromMatrix(Wc);this.autoUpdateObjects&&this.initWebGLObjects(a);q(this.renderPluginsPre,a,b);N.info.render.calls=0;N.info.render.vertices=0;N.info.render.faces=0;N.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);i=a.__webglObjects;d=
0;for(e=i.length;d<e;d++)if(f=i[d],h=f.object,f.render=!1,h.visible&&(!(h instanceof THREE.Mesh||h instanceof THREE.ParticleSystem)||!h.frustumCulled||jc.intersectsObject(h))){B(h,b);var m=f,n=m.buffer,r=void 0,v=r=void 0,v=m.object.material;if(v instanceof THREE.MeshFaceMaterial)r=n.materialIndex,r=v.materials[r],r.transparent?(m.transparent=r,m.opaque=null):(m.opaque=r,m.transparent=null);else if(r=v)r.transparent?(m.transparent=r,m.opaque=null):(m.opaque=r,m.transparent=null);f.render=!0;!0===
this.sortObjects&&(null!==h.renderDepth?f.z=h.renderDepth:(Fa.getPositionFromMatrix(h.matrixWorld),Fa.applyProjection(Wc),f.z=Fa.z),f.id=h.id)}this.sortObjects&&i.sort(k);i=a.__webglObjectsImmediate;d=0;for(e=i.length;d<e;d++)f=i[d],h=f.object,h.visible&&(B(h,b),h=f.object.material,h.transparent?(f.transparent=h,f.opaque=null):(f.opaque=h,f.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),
this.setDepthWrite(d.depthWrite),H(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),t(a.__webglObjects,!1,"",b,j,l,!0,d),x(a.__webglObjectsImmediate,"",b,j,l,!1,d)):(d=null,this.setBlending(THREE.NoBlending),t(a.__webglObjects,!0,"opaque",b,j,l,!1,d),x(a.__webglObjectsImmediate,"opaque",b,j,l,!1,d),t(a.__webglObjects,!1,"transparent",b,j,l,!0,d),x(a.__webglObjectsImmediate,"transparent",b,j,l,!0,d));q(this.renderPluginsPost,a,b);c&&(c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&
c.minFilter!==THREE.LinearFilter)&&(c instanceof THREE.WebGLRenderTargetCube?(g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture),g.generateMipmap(g.TEXTURE_CUBE_MAP),g.bindTexture(g.TEXTURE_CUBE_MAP,null)):(g.bindTexture(g.TEXTURE_2D,c.__webglTexture),g.generateMipmap(g.TEXTURE_2D),g.bindTexture(g.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=r(a,b,c,d,e);Ta=-1;N.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,
g,jc):e.render(function(a){N.renderBufferImmediate(a,f,d)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;){var b=a.__objectsAdded[0],i=a,j=void 0,k=void 0,q=void 0,r=void 0;if(!b.__webglInit&&(b.__webglInit=!0,b._modelViewMatrix=new THREE.Matrix4,b._normalMatrix=new THREE.Matrix3,void 0!==b.geometry&&void 0===b.geometry.__webglInit&&(b.geometry.__webglInit=!0,b.geometry.addEventListener("dispose",
yd)),k=b.geometry,void 0!==k))if(k instanceof THREE.BufferGeometry){var t=k,v=void 0,w=void 0,x=void 0;for(v in t.attributes)x="index"===v?g.ELEMENT_ARRAY_BUFFER:g.ARRAY_BUFFER,w=t.attributes[v],w.buffer=g.createBuffer(),g.bindBuffer(x,w.buffer),g.bufferData(x,w.array,g.STATIC_DRAW)}else if(b instanceof THREE.Mesh){q=b.material;if(void 0===k.geometryGroups){var A=k,B=void 0,E=void 0,D=void 0,F=void 0,I=void 0,H=void 0,M={},P=A.morphTargets.length,R=A.morphNormals.length,W=q instanceof THREE.MeshFaceMaterial;
A.geometryGroups={};B=0;for(E=A.faces.length;B<E;B++)D=A.faces[B],F=W?D.materialIndex:0,void 0===M[F]&&(M[F]={hash:F,counter:0}),H=M[F].hash+"_"+M[F].counter,void 0===A.geometryGroups[H]&&(A.geometryGroups[H]={faces3:[],faces4:[],materialIndex:F,vertices:0,numMorphTargets:P,numMorphNormals:R}),I=D instanceof THREE.Face3?3:4,65535<A.geometryGroups[H].vertices+I&&(M[F].counter+=1,H=M[F].hash+"_"+M[F].counter,void 0===A.geometryGroups[H]&&(A.geometryGroups[H]={faces3:[],faces4:[],materialIndex:F,vertices:0,
numMorphTargets:P,numMorphNormals:R})),D instanceof THREE.Face3?A.geometryGroups[H].faces3.push(B):A.geometryGroups[H].faces4.push(B),A.geometryGroups[H].vertices+=I;A.geometryGroupsList=[];var X=void 0;for(X in A.geometryGroups)A.geometryGroups[X].id=cb++,A.geometryGroupsList.push(A.geometryGroups[X])}for(j in k.geometryGroups)if(r=k.geometryGroups[j],!r.__webglVertexBuffer){var U=r;U.__webglVertexBuffer=g.createBuffer();U.__webglNormalBuffer=g.createBuffer();U.__webglTangentBuffer=g.createBuffer();
U.__webglColorBuffer=g.createBuffer();U.__webglUVBuffer=g.createBuffer();U.__webglUV2Buffer=g.createBuffer();U.__webglSkinIndicesBuffer=g.createBuffer();U.__webglSkinWeightsBuffer=g.createBuffer();U.__webglFaceBuffer=g.createBuffer();U.__webglLineBuffer=g.createBuffer();var ca=void 0,ga=void 0;if(U.numMorphTargets){U.__webglMorphTargetsBuffers=[];ca=0;for(ga=U.numMorphTargets;ca<ga;ca++)U.__webglMorphTargetsBuffers.push(g.createBuffer())}if(U.numMorphNormals){U.__webglMorphNormalsBuffers=[];ca=0;
for(ga=U.numMorphNormals;ca<ga;ca++)U.__webglMorphNormalsBuffers.push(g.createBuffer())}N.info.memory.geometries++;d(r,b);k.verticesNeedUpdate=!0;k.morphTargetsNeedUpdate=!0;k.elementsNeedUpdate=!0;k.uvsNeedUpdate=!0;k.normalsNeedUpdate=!0;k.tangentsNeedUpdate=!0;k.colorsNeedUpdate=!0}}else if(b instanceof THREE.Ribbon){if(!k.__webglVertexBuffer){var ha=k;ha.__webglVertexBuffer=g.createBuffer();ha.__webglColorBuffer=g.createBuffer();ha.__webglNormalBuffer=g.createBuffer();N.info.memory.geometries++;
var fa=k,pa=b,ja=fa.vertices.length;fa.__vertexArray=new Float32Array(3*ja);fa.__colorArray=new Float32Array(3*ja);fa.__normalArray=new Float32Array(3*ja);fa.__webglVertexCount=ja;c(fa,pa);k.verticesNeedUpdate=!0;k.colorsNeedUpdate=!0;k.normalsNeedUpdate=!0}}else if(b instanceof THREE.Line){if(!k.__webglVertexBuffer){var ya=k;ya.__webglVertexBuffer=g.createBuffer();ya.__webglColorBuffer=g.createBuffer();ya.__webglLineDistanceBuffer=g.createBuffer();N.info.memory.geometries++;var oa=k,Da=b,za=oa.vertices.length;
oa.__vertexArray=new Float32Array(3*za);oa.__colorArray=new Float32Array(3*za);oa.__lineDistanceArray=new Float32Array(1*za);oa.__webglLineCount=za;c(oa,Da);k.verticesNeedUpdate=!0;k.colorsNeedUpdate=!0;k.lineDistancesNeedUpdate=!0}}else if(b instanceof THREE.ParticleSystem&&!k.__webglVertexBuffer){var Ca=k;Ca.__webglVertexBuffer=g.createBuffer();Ca.__webglColorBuffer=g.createBuffer();N.info.memory.geometries++;var ta=k,Ua=b,Qa=ta.vertices.length;ta.__vertexArray=new Float32Array(3*Qa);ta.__colorArray=
new Float32Array(3*Qa);ta.__sortArray=[];ta.__webglParticleCount=Qa;c(ta,Ua);k.verticesNeedUpdate=!0;k.colorsNeedUpdate=!0}if(!b.__webglActive){if(b instanceof THREE.Mesh)if(k=b.geometry,k instanceof THREE.BufferGeometry)y(i.__webglObjects,k,b);else{if(k instanceof THREE.Geometry)for(j in k.geometryGroups)r=k.geometryGroups[j],y(i.__webglObjects,r,b)}else b instanceof THREE.Ribbon||b instanceof THREE.Line||b instanceof THREE.ParticleSystem?(k=b.geometry,y(i.__webglObjects,k,b)):b instanceof THREE.ImmediateRenderObject||
b.immediateRenderCallback?i.__webglObjectsImmediate.push({object:b,opaque:null,transparent:null}):b instanceof THREE.Sprite?i.__webglSprites.push(b):b instanceof THREE.LensFlare&&i.__webglFlares.push(b);b.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;){var sa=a.__objectsRemoved[0],Ma=a;sa instanceof THREE.Mesh||sa instanceof THREE.ParticleSystem||sa instanceof THREE.Ribbon||sa instanceof THREE.Line?C(Ma.__webglObjects,sa):sa instanceof THREE.Sprite?u(Ma.__webglSprites,
sa):sa instanceof THREE.LensFlare?u(Ma.__webglFlares,sa):(sa instanceof THREE.ImmediateRenderObject||sa.immediateRenderCallback)&&C(Ma.__webglObjectsImmediate,sa);sa.__webglActive=!1;a.__objectsRemoved.splice(0,1)}for(var Ga=0,bb=a.__webglObjects.length;Ga<bb;Ga++){var db=a.__webglObjects[Ga].object,Z=db.geometry,Wa=void 0,Ta=void 0,Na=void 0;if(Z instanceof THREE.BufferGeometry){var jb=g.DYNAMIC_DRAW,qb=!Z.dynamic,nb=Z.attributes,kb=void 0,Qb=void 0;for(kb in nb)Qb=nb[kb],Qb.needsUpdate&&("index"===
kb?(g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,Qb.buffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,Qb.array,jb)):(g.bindBuffer(g.ARRAY_BUFFER,Qb.buffer),g.bufferData(g.ARRAY_BUFFER,Qb.array,jb)),Qb.needsUpdate=!1),qb&&!Qb.dynamic&&delete Qb.array}else if(db instanceof THREE.Mesh){for(var ob=0,Yb=Z.geometryGroupsList.length;ob<Yb;ob++)if(Wa=Z.geometryGroupsList[ob],Na=e(db,Wa),Z.buffersNeedUpdate&&d(Wa,db),Ta=Na.attributes&&m(Na),Z.verticesNeedUpdate||Z.morphTargetsNeedUpdate||Z.elementsNeedUpdate||Z.uvsNeedUpdate||
Z.normalsNeedUpdate||Z.colorsNeedUpdate||Z.tangentsNeedUpdate||Ta){var ba=Wa,Zb=db,eb=g.DYNAMIC_DRAW,$b=!Z.dynamic,lc=Na;if(ba.__inittedArrays){var Pb=f(lc),ub=lc.vertexColors?lc.vertexColors:!1,Xb=h(lc),sb=Pb===THREE.SmoothShading,z=void 0,O=void 0,ac=void 0,G=void 0,sc=void 0,bc=void 0,rb=void 0,tb=void 0,Rb=void 0,tc=void 0,uc=void 0,J=void 0,K=void 0,L=void 0,aa=void 0,vb=void 0,wb=void 0,xb=void 0,pb=void 0,yb=void 0,zb=void 0,Ab=void 0,Fc=void 0,Bb=void 0,Cb=void 0,Db=void 0,Gc=void 0,Eb=void 0,
Fb=void 0,Gb=void 0,Hc=void 0,Hb=void 0,Ib=void 0,Jb=void 0,Ic=void 0,ia=void 0,kc=void 0,cc=void 0,vc=void 0,wc=void 0,Ja=void 0,qc=void 0,Ha=void 0,Ia=void 0,dc=void 0,Sb=void 0,Aa=0,Ea=0,Tb=0,Ub=0,fb=0,Ra=0,ma=0,Va=0,Ba=0,S=0,Y=0,s=0,ka=void 0,Ka=ba.__vertexArray,Jc=ba.__uvArray,Kc=ba.__uv2Array,gb=ba.__normalArray,ua=ba.__tangentArray,La=ba.__colorArray,va=ba.__skinIndexArray,wa=ba.__skinWeightArray,hc=ba.__morphTargetsArrays,ic=ba.__morphNormalsArrays,jc=ba.__webglCustomAttributesList,p=void 0,
Kb=ba.__faceArray,ab=ba.__lineArray,Xa=Zb.geometry,Dc=Xa.elementsNeedUpdate,rc=Xa.uvsNeedUpdate,Sc=Xa.normalsNeedUpdate,Tc=Xa.tangentsNeedUpdate,Uc=Xa.colorsNeedUpdate,Vc=Xa.morphTargetsNeedUpdate,mc=Xa.vertices,da=ba.faces3,ea=ba.faces4,Sa=Xa.faces,rd=Xa.faceVertexUvs[0],sd=Xa.faceVertexUvs[1],nc=Xa.skinIndices,ec=Xa.skinWeights,fc=Xa.morphTargets,Zc=Xa.morphNormals;if(Xa.verticesNeedUpdate){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],J=mc[G.a],K=mc[G.b],L=mc[G.c],Ka[Ea]=J.x,Ka[Ea+1]=J.y,Ka[Ea+2]=J.z,
Ka[Ea+3]=K.x,Ka[Ea+4]=K.y,Ka[Ea+5]=K.z,Ka[Ea+6]=L.x,Ka[Ea+7]=L.y,Ka[Ea+8]=L.z,Ea+=9;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],J=mc[G.a],K=mc[G.b],L=mc[G.c],aa=mc[G.d],Ka[Ea]=J.x,Ka[Ea+1]=J.y,Ka[Ea+2]=J.z,Ka[Ea+3]=K.x,Ka[Ea+4]=K.y,Ka[Ea+5]=K.z,Ka[Ea+6]=L.x,Ka[Ea+7]=L.y,Ka[Ea+8]=L.z,Ka[Ea+9]=aa.x,Ka[Ea+10]=aa.y,Ka[Ea+11]=aa.z,Ea+=12;g.bindBuffer(g.ARRAY_BUFFER,ba.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,Ka,eb)}if(Vc){Ja=0;for(qc=fc.length;Ja<qc;Ja++){z=Y=0;for(O=da.length;z<O;z++)dc=da[z],G=Sa[dc],
J=fc[Ja].vertices[G.a],K=fc[Ja].vertices[G.b],L=fc[Ja].vertices[G.c],Ha=hc[Ja],Ha[Y]=J.x,Ha[Y+1]=J.y,Ha[Y+2]=J.z,Ha[Y+3]=K.x,Ha[Y+4]=K.y,Ha[Y+5]=K.z,Ha[Y+6]=L.x,Ha[Y+7]=L.y,Ha[Y+8]=L.z,lc.morphNormals&&(sb?(Sb=Zc[Ja].vertexNormals[dc],yb=Sb.a,zb=Sb.b,Ab=Sb.c):Ab=zb=yb=Zc[Ja].faceNormals[dc],Ia=ic[Ja],Ia[Y]=yb.x,Ia[Y+1]=yb.y,Ia[Y+2]=yb.z,Ia[Y+3]=zb.x,Ia[Y+4]=zb.y,Ia[Y+5]=zb.z,Ia[Y+6]=Ab.x,Ia[Y+7]=Ab.y,Ia[Y+8]=Ab.z),Y+=9;z=0;for(O=ea.length;z<O;z++)dc=ea[z],G=Sa[dc],J=fc[Ja].vertices[G.a],K=fc[Ja].vertices[G.b],
L=fc[Ja].vertices[G.c],aa=fc[Ja].vertices[G.d],Ha=hc[Ja],Ha[Y]=J.x,Ha[Y+1]=J.y,Ha[Y+2]=J.z,Ha[Y+3]=K.x,Ha[Y+4]=K.y,Ha[Y+5]=K.z,Ha[Y+6]=L.x,Ha[Y+7]=L.y,Ha[Y+8]=L.z,Ha[Y+9]=aa.x,Ha[Y+10]=aa.y,Ha[Y+11]=aa.z,lc.morphNormals&&(sb?(Sb=Zc[Ja].vertexNormals[dc],yb=Sb.a,zb=Sb.b,Ab=Sb.c,Fc=Sb.d):Fc=Ab=zb=yb=Zc[Ja].faceNormals[dc],Ia=ic[Ja],Ia[Y]=yb.x,Ia[Y+1]=yb.y,Ia[Y+2]=yb.z,Ia[Y+3]=zb.x,Ia[Y+4]=zb.y,Ia[Y+5]=zb.z,Ia[Y+6]=Ab.x,Ia[Y+7]=Ab.y,Ia[Y+8]=Ab.z,Ia[Y+9]=Fc.x,Ia[Y+10]=Fc.y,Ia[Y+11]=Fc.z),Y+=12;g.bindBuffer(g.ARRAY_BUFFER,
ba.__webglMorphTargetsBuffers[Ja]);g.bufferData(g.ARRAY_BUFFER,hc[Ja],eb);lc.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,ba.__webglMorphNormalsBuffers[Ja]),g.bufferData(g.ARRAY_BUFFER,ic[Ja],eb))}}if(ec.length){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],Eb=ec[G.a],Fb=ec[G.b],Gb=ec[G.c],wa[S]=Eb.x,wa[S+1]=Eb.y,wa[S+2]=Eb.z,wa[S+3]=Eb.w,wa[S+4]=Fb.x,wa[S+5]=Fb.y,wa[S+6]=Fb.z,wa[S+7]=Fb.w,wa[S+8]=Gb.x,wa[S+9]=Gb.y,wa[S+10]=Gb.z,wa[S+11]=Gb.w,Hb=nc[G.a],Ib=nc[G.b],Jb=nc[G.c],va[S]=Hb.x,va[S+1]=Hb.y,va[S+
2]=Hb.z,va[S+3]=Hb.w,va[S+4]=Ib.x,va[S+5]=Ib.y,va[S+6]=Ib.z,va[S+7]=Ib.w,va[S+8]=Jb.x,va[S+9]=Jb.y,va[S+10]=Jb.z,va[S+11]=Jb.w,S+=12;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],Eb=ec[G.a],Fb=ec[G.b],Gb=ec[G.c],Hc=ec[G.d],wa[S]=Eb.x,wa[S+1]=Eb.y,wa[S+2]=Eb.z,wa[S+3]=Eb.w,wa[S+4]=Fb.x,wa[S+5]=Fb.y,wa[S+6]=Fb.z,wa[S+7]=Fb.w,wa[S+8]=Gb.x,wa[S+9]=Gb.y,wa[S+10]=Gb.z,wa[S+11]=Gb.w,wa[S+12]=Hc.x,wa[S+13]=Hc.y,wa[S+14]=Hc.z,wa[S+15]=Hc.w,Hb=nc[G.a],Ib=nc[G.b],Jb=nc[G.c],Ic=nc[G.d],va[S]=Hb.x,va[S+1]=Hb.y,va[S+
2]=Hb.z,va[S+3]=Hb.w,va[S+4]=Ib.x,va[S+5]=Ib.y,va[S+6]=Ib.z,va[S+7]=Ib.w,va[S+8]=Jb.x,va[S+9]=Jb.y,va[S+10]=Jb.z,va[S+11]=Jb.w,va[S+12]=Ic.x,va[S+13]=Ic.y,va[S+14]=Ic.z,va[S+15]=Ic.w,S+=16;0<S&&(g.bindBuffer(g.ARRAY_BUFFER,ba.__webglSkinIndicesBuffer),g.bufferData(g.ARRAY_BUFFER,va,eb),g.bindBuffer(g.ARRAY_BUFFER,ba.__webglSkinWeightsBuffer),g.bufferData(g.ARRAY_BUFFER,wa,eb))}if(Uc&&ub){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],rb=G.vertexColors,tb=G.color,3===rb.length&&ub===THREE.VertexColors?(Bb=
rb[0],Cb=rb[1],Db=rb[2]):Db=Cb=Bb=tb,La[Ba]=Bb.r,La[Ba+1]=Bb.g,La[Ba+2]=Bb.b,La[Ba+3]=Cb.r,La[Ba+4]=Cb.g,La[Ba+5]=Cb.b,La[Ba+6]=Db.r,La[Ba+7]=Db.g,La[Ba+8]=Db.b,Ba+=9;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],rb=G.vertexColors,tb=G.color,4===rb.length&&ub===THREE.VertexColors?(Bb=rb[0],Cb=rb[1],Db=rb[2],Gc=rb[3]):Gc=Db=Cb=Bb=tb,La[Ba]=Bb.r,La[Ba+1]=Bb.g,La[Ba+2]=Bb.b,La[Ba+3]=Cb.r,La[Ba+4]=Cb.g,La[Ba+5]=Cb.b,La[Ba+6]=Db.r,La[Ba+7]=Db.g,La[Ba+8]=Db.b,La[Ba+9]=Gc.r,La[Ba+10]=Gc.g,La[Ba+11]=Gc.b,Ba+=12;
0<Ba&&(g.bindBuffer(g.ARRAY_BUFFER,ba.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,La,eb))}if(Tc&&Xa.hasTangents){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],Rb=G.vertexTangents,vb=Rb[0],wb=Rb[1],xb=Rb[2],ua[ma]=vb.x,ua[ma+1]=vb.y,ua[ma+2]=vb.z,ua[ma+3]=vb.w,ua[ma+4]=wb.x,ua[ma+5]=wb.y,ua[ma+6]=wb.z,ua[ma+7]=wb.w,ua[ma+8]=xb.x,ua[ma+9]=xb.y,ua[ma+10]=xb.z,ua[ma+11]=xb.w,ma+=12;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],Rb=G.vertexTangents,vb=Rb[0],wb=Rb[1],xb=Rb[2],pb=Rb[3],ua[ma]=vb.x,ua[ma+1]=vb.y,
ua[ma+2]=vb.z,ua[ma+3]=vb.w,ua[ma+4]=wb.x,ua[ma+5]=wb.y,ua[ma+6]=wb.z,ua[ma+7]=wb.w,ua[ma+8]=xb.x,ua[ma+9]=xb.y,ua[ma+10]=xb.z,ua[ma+11]=xb.w,ua[ma+12]=pb.x,ua[ma+13]=pb.y,ua[ma+14]=pb.z,ua[ma+15]=pb.w,ma+=16;g.bindBuffer(g.ARRAY_BUFFER,ba.__webglTangentBuffer);g.bufferData(g.ARRAY_BUFFER,ua,eb)}if(Sc&&Pb){z=0;for(O=da.length;z<O;z++)if(G=Sa[da[z]],sc=G.vertexNormals,bc=G.normal,3===sc.length&&sb)for(ia=0;3>ia;ia++)cc=sc[ia],gb[Ra]=cc.x,gb[Ra+1]=cc.y,gb[Ra+2]=cc.z,Ra+=3;else for(ia=0;3>ia;ia++)gb[Ra]=
bc.x,gb[Ra+1]=bc.y,gb[Ra+2]=bc.z,Ra+=3;z=0;for(O=ea.length;z<O;z++)if(G=Sa[ea[z]],sc=G.vertexNormals,bc=G.normal,4===sc.length&&sb)for(ia=0;4>ia;ia++)cc=sc[ia],gb[Ra]=cc.x,gb[Ra+1]=cc.y,gb[Ra+2]=cc.z,Ra+=3;else for(ia=0;4>ia;ia++)gb[Ra]=bc.x,gb[Ra+1]=bc.y,gb[Ra+2]=bc.z,Ra+=3;g.bindBuffer(g.ARRAY_BUFFER,ba.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,gb,eb)}if(rc&&rd&&Xb){z=0;for(O=da.length;z<O;z++)if(ac=da[z],tc=rd[ac],void 0!==tc)for(ia=0;3>ia;ia++)vc=tc[ia],Jc[Tb]=vc.x,Jc[Tb+1]=vc.y,Tb+=2;
z=0;for(O=ea.length;z<O;z++)if(ac=ea[z],tc=rd[ac],void 0!==tc)for(ia=0;4>ia;ia++)vc=tc[ia],Jc[Tb]=vc.x,Jc[Tb+1]=vc.y,Tb+=2;0<Tb&&(g.bindBuffer(g.ARRAY_BUFFER,ba.__webglUVBuffer),g.bufferData(g.ARRAY_BUFFER,Jc,eb))}if(rc&&sd&&Xb){z=0;for(O=da.length;z<O;z++)if(ac=da[z],uc=sd[ac],void 0!==uc)for(ia=0;3>ia;ia++)wc=uc[ia],Kc[Ub]=wc.x,Kc[Ub+1]=wc.y,Ub+=2;z=0;for(O=ea.length;z<O;z++)if(ac=ea[z],uc=sd[ac],void 0!==uc)for(ia=0;4>ia;ia++)wc=uc[ia],Kc[Ub]=wc.x,Kc[Ub+1]=wc.y,Ub+=2;0<Ub&&(g.bindBuffer(g.ARRAY_BUFFER,
ba.__webglUV2Buffer),g.bufferData(g.ARRAY_BUFFER,Kc,eb))}if(Dc){z=0;for(O=da.length;z<O;z++)Kb[fb]=Aa,Kb[fb+1]=Aa+1,Kb[fb+2]=Aa+2,fb+=3,ab[Va]=Aa,ab[Va+1]=Aa+1,ab[Va+2]=Aa,ab[Va+3]=Aa+2,ab[Va+4]=Aa+1,ab[Va+5]=Aa+2,Va+=6,Aa+=3;z=0;for(O=ea.length;z<O;z++)Kb[fb]=Aa,Kb[fb+1]=Aa+1,Kb[fb+2]=Aa+3,Kb[fb+3]=Aa+1,Kb[fb+4]=Aa+2,Kb[fb+5]=Aa+3,fb+=6,ab[Va]=Aa,ab[Va+1]=Aa+1,ab[Va+2]=Aa,ab[Va+3]=Aa+3,ab[Va+4]=Aa+1,ab[Va+5]=Aa+2,ab[Va+6]=Aa+2,ab[Va+7]=Aa+3,Va+=8,Aa+=4;g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,ba.__webglFaceBuffer);
g.bufferData(g.ELEMENT_ARRAY_BUFFER,Kb,eb);g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,ba.__webglLineBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,ab,eb)}if(jc){ia=0;for(kc=jc.length;ia<kc;ia++)if(p=jc[ia],p.__original.needsUpdate){s=0;if(1===p.size)if(void 0===p.boundTo||"vertices"===p.boundTo){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],p.array[s]=p.value[G.a],p.array[s+1]=p.value[G.b],p.array[s+2]=p.value[G.c],s+=3;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],p.array[s]=p.value[G.a],p.array[s+1]=p.value[G.b],p.array[s+
2]=p.value[G.c],p.array[s+3]=p.value[G.d],s+=4}else{if("faces"===p.boundTo){z=0;for(O=da.length;z<O;z++)ka=p.value[da[z]],p.array[s]=ka,p.array[s+1]=ka,p.array[s+2]=ka,s+=3;z=0;for(O=ea.length;z<O;z++)ka=p.value[ea[z]],p.array[s]=ka,p.array[s+1]=ka,p.array[s+2]=ka,p.array[s+3]=ka,s+=4}}else if(2===p.size)if(void 0===p.boundTo||"vertices"===p.boundTo){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],J=p.value[G.a],K=p.value[G.b],L=p.value[G.c],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=K.x,p.array[s+3]=K.y,
p.array[s+4]=L.x,p.array[s+5]=L.y,s+=6;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],J=p.value[G.a],K=p.value[G.b],L=p.value[G.c],aa=p.value[G.d],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=K.x,p.array[s+3]=K.y,p.array[s+4]=L.x,p.array[s+5]=L.y,p.array[s+6]=aa.x,p.array[s+7]=aa.y,s+=8}else{if("faces"===p.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=ka=p.value[da[z]],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=K.x,p.array[s+3]=K.y,p.array[s+4]=L.x,p.array[s+5]=L.y,s+=6;z=0;for(O=ea.length;z<O;z++)aa=L=K=
J=ka=p.value[ea[z]],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=K.x,p.array[s+3]=K.y,p.array[s+4]=L.x,p.array[s+5]=L.y,p.array[s+6]=aa.x,p.array[s+7]=aa.y,s+=8}}else if(3===p.size){var Q;Q="c"===p.type?["r","g","b"]:["x","y","z"];if(void 0===p.boundTo||"vertices"===p.boundTo){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],J=p.value[G.a],K=p.value[G.b],L=p.value[G.c],p.array[s]=J[Q[0]],p.array[s+1]=J[Q[1]],p.array[s+2]=J[Q[2]],p.array[s+3]=K[Q[0]],p.array[s+4]=K[Q[1]],p.array[s+5]=K[Q[2]],p.array[s+6]=L[Q[0]],
p.array[s+7]=L[Q[1]],p.array[s+8]=L[Q[2]],s+=9;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],J=p.value[G.a],K=p.value[G.b],L=p.value[G.c],aa=p.value[G.d],p.array[s]=J[Q[0]],p.array[s+1]=J[Q[1]],p.array[s+2]=J[Q[2]],p.array[s+3]=K[Q[0]],p.array[s+4]=K[Q[1]],p.array[s+5]=K[Q[2]],p.array[s+6]=L[Q[0]],p.array[s+7]=L[Q[1]],p.array[s+8]=L[Q[2]],p.array[s+9]=aa[Q[0]],p.array[s+10]=aa[Q[1]],p.array[s+11]=aa[Q[2]],s+=12}else if("faces"===p.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=ka=p.value[da[z]],p.array[s]=
J[Q[0]],p.array[s+1]=J[Q[1]],p.array[s+2]=J[Q[2]],p.array[s+3]=K[Q[0]],p.array[s+4]=K[Q[1]],p.array[s+5]=K[Q[2]],p.array[s+6]=L[Q[0]],p.array[s+7]=L[Q[1]],p.array[s+8]=L[Q[2]],s+=9;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=ka=p.value[ea[z]],p.array[s]=J[Q[0]],p.array[s+1]=J[Q[1]],p.array[s+2]=J[Q[2]],p.array[s+3]=K[Q[0]],p.array[s+4]=K[Q[1]],p.array[s+5]=K[Q[2]],p.array[s+6]=L[Q[0]],p.array[s+7]=L[Q[1]],p.array[s+8]=L[Q[2]],p.array[s+9]=aa[Q[0]],p.array[s+10]=aa[Q[1]],p.array[s+11]=aa[Q[2]],s+=12}else if("faceVertices"===
p.boundTo){z=0;for(O=da.length;z<O;z++)ka=p.value[da[z]],J=ka[0],K=ka[1],L=ka[2],p.array[s]=J[Q[0]],p.array[s+1]=J[Q[1]],p.array[s+2]=J[Q[2]],p.array[s+3]=K[Q[0]],p.array[s+4]=K[Q[1]],p.array[s+5]=K[Q[2]],p.array[s+6]=L[Q[0]],p.array[s+7]=L[Q[1]],p.array[s+8]=L[Q[2]],s+=9;z=0;for(O=ea.length;z<O;z++)ka=p.value[ea[z]],J=ka[0],K=ka[1],L=ka[2],aa=ka[3],p.array[s]=J[Q[0]],p.array[s+1]=J[Q[1]],p.array[s+2]=J[Q[2]],p.array[s+3]=K[Q[0]],p.array[s+4]=K[Q[1]],p.array[s+5]=K[Q[2]],p.array[s+6]=L[Q[0]],p.array[s+
7]=L[Q[1]],p.array[s+8]=L[Q[2]],p.array[s+9]=aa[Q[0]],p.array[s+10]=aa[Q[1]],p.array[s+11]=aa[Q[2]],s+=12}}else if(4===p.size)if(void 0===p.boundTo||"vertices"===p.boundTo){z=0;for(O=da.length;z<O;z++)G=Sa[da[z]],J=p.value[G.a],K=p.value[G.b],L=p.value[G.c],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=J.z,p.array[s+3]=J.w,p.array[s+4]=K.x,p.array[s+5]=K.y,p.array[s+6]=K.z,p.array[s+7]=K.w,p.array[s+8]=L.x,p.array[s+9]=L.y,p.array[s+10]=L.z,p.array[s+11]=L.w,s+=12;z=0;for(O=ea.length;z<O;z++)G=Sa[ea[z]],
J=p.value[G.a],K=p.value[G.b],L=p.value[G.c],aa=p.value[G.d],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=J.z,p.array[s+3]=J.w,p.array[s+4]=K.x,p.array[s+5]=K.y,p.array[s+6]=K.z,p.array[s+7]=K.w,p.array[s+8]=L.x,p.array[s+9]=L.y,p.array[s+10]=L.z,p.array[s+11]=L.w,p.array[s+12]=aa.x,p.array[s+13]=aa.y,p.array[s+14]=aa.z,p.array[s+15]=aa.w,s+=16}else if("faces"===p.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=ka=p.value[da[z]],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=J.z,p.array[s+3]=J.w,p.array[s+
4]=K.x,p.array[s+5]=K.y,p.array[s+6]=K.z,p.array[s+7]=K.w,p.array[s+8]=L.x,p.array[s+9]=L.y,p.array[s+10]=L.z,p.array[s+11]=L.w,s+=12;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=ka=p.value[ea[z]],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=J.z,p.array[s+3]=J.w,p.array[s+4]=K.x,p.array[s+5]=K.y,p.array[s+6]=K.z,p.array[s+7]=K.w,p.array[s+8]=L.x,p.array[s+9]=L.y,p.array[s+10]=L.z,p.array[s+11]=L.w,p.array[s+12]=aa.x,p.array[s+13]=aa.y,p.array[s+14]=aa.z,p.array[s+15]=aa.w,s+=16}else if("faceVertices"===p.boundTo){z=
0;for(O=da.length;z<O;z++)ka=p.value[da[z]],J=ka[0],K=ka[1],L=ka[2],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=J.z,p.array[s+3]=J.w,p.array[s+4]=K.x,p.array[s+5]=K.y,p.array[s+6]=K.z,p.array[s+7]=K.w,p.array[s+8]=L.x,p.array[s+9]=L.y,p.array[s+10]=L.z,p.array[s+11]=L.w,s+=12;z=0;for(O=ea.length;z<O;z++)ka=p.value[ea[z]],J=ka[0],K=ka[1],L=ka[2],aa=ka[3],p.array[s]=J.x,p.array[s+1]=J.y,p.array[s+2]=J.z,p.array[s+3]=J.w,p.array[s+4]=K.x,p.array[s+5]=K.y,p.array[s+6]=K.z,p.array[s+7]=K.w,p.array[s+
8]=L.x,p.array[s+9]=L.y,p.array[s+10]=L.z,p.array[s+11]=L.w,p.array[s+12]=aa.x,p.array[s+13]=aa.y,p.array[s+14]=aa.z,p.array[s+15]=aa.w,s+=16}g.bindBuffer(g.ARRAY_BUFFER,p.buffer);g.bufferData(g.ARRAY_BUFFER,p.array,eb)}}$b&&(delete ba.__inittedArrays,delete ba.__colorArray,delete ba.__normalArray,delete ba.__tangentArray,delete ba.__uvArray,delete ba.__uv2Array,delete ba.__faceArray,delete ba.__vertexArray,delete ba.__lineArray,delete ba.__skinIndexArray,delete ba.__skinWeightArray)}}Z.verticesNeedUpdate=
!1;Z.morphTargetsNeedUpdate=!1;Z.elementsNeedUpdate=!1;Z.uvsNeedUpdate=!1;Z.normalsNeedUpdate=!1;Z.colorsNeedUpdate=!1;Z.tangentsNeedUpdate=!1;Z.buffersNeedUpdate=!1;Na.attributes&&l(Na)}else if(db instanceof THREE.Ribbon){Na=e(db,Z);Ta=Na.attributes&&m(Na);if(Z.verticesNeedUpdate||Z.colorsNeedUpdate||Z.normalsNeedUpdate||Ta){var hb=Z,$c=g.DYNAMIC_DRAW,Lc=void 0,Mc=void 0,Nc=void 0,ad=void 0,la=void 0,bd=void 0,cd=void 0,dd=void 0,Ac=void 0,Oa=void 0,xc=void 0,qa=void 0,Ya=void 0,Bc=hb.vertices,Cc=
hb.colors,Ec=hb.normals,Xc=Bc.length,Yc=Cc.length,od=Ec.length,ed=hb.__vertexArray,fd=hb.__colorArray,gd=hb.__normalArray,qd=hb.colorsNeedUpdate,Hd=hb.normalsNeedUpdate,td=hb.__webglCustomAttributesList;if(hb.verticesNeedUpdate){for(Lc=0;Lc<Xc;Lc++)ad=Bc[Lc],la=3*Lc,ed[la]=ad.x,ed[la+1]=ad.y,ed[la+2]=ad.z;g.bindBuffer(g.ARRAY_BUFFER,hb.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,ed,$c)}if(qd){for(Mc=0;Mc<Yc;Mc++)bd=Cc[Mc],la=3*Mc,fd[la]=bd.r,fd[la+1]=bd.g,fd[la+2]=bd.b;g.bindBuffer(g.ARRAY_BUFFER,
hb.__webglColorBuffer);g.bufferData(g.ARRAY_BUFFER,fd,$c)}if(Hd){for(Nc=0;Nc<od;Nc++)cd=Ec[Nc],la=3*Nc,gd[la]=cd.x,gd[la+1]=cd.y,gd[la+2]=cd.z;g.bindBuffer(g.ARRAY_BUFFER,hb.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,gd,$c)}if(td){dd=0;for(Ac=td.length;dd<Ac;dd++)if(qa=td[dd],qa.needsUpdate&&(void 0===qa.boundTo||"vertices"===qa.boundTo)){la=0;xc=qa.value.length;if(1===qa.size)for(Oa=0;Oa<xc;Oa++)qa.array[Oa]=qa.value[Oa];else if(2===qa.size)for(Oa=0;Oa<xc;Oa++)Ya=qa.value[Oa],qa.array[la]=
Ya.x,qa.array[la+1]=Ya.y,la+=2;else if(3===qa.size)if("c"===qa.type)for(Oa=0;Oa<xc;Oa++)Ya=qa.value[Oa],qa.array[la]=Ya.r,qa.array[la+1]=Ya.g,qa.array[la+2]=Ya.b,la+=3;else for(Oa=0;Oa<xc;Oa++)Ya=qa.value[Oa],qa.array[la]=Ya.x,qa.array[la+1]=Ya.y,qa.array[la+2]=Ya.z,la+=3;else if(4===qa.size)for(Oa=0;Oa<xc;Oa++)Ya=qa.value[Oa],qa.array[la]=Ya.x,qa.array[la+1]=Ya.y,qa.array[la+2]=Ya.z,qa.array[la+3]=Ya.w,la+=4;g.bindBuffer(g.ARRAY_BUFFER,qa.buffer);g.bufferData(g.ARRAY_BUFFER,qa.array,$c)}}}Z.verticesNeedUpdate=
!1;Z.colorsNeedUpdate=!1;Z.normalsNeedUpdate=!1;Na.attributes&&l(Na)}else if(db instanceof THREE.Line){Na=e(db,Z);Ta=Na.attributes&&m(Na);if(Z.verticesNeedUpdate||Z.colorsNeedUpdate||Z.lineDistancesNeedUpdate||Ta){var ib=Z,hd=g.DYNAMIC_DRAW,Oc=void 0,Pc=void 0,Qc=void 0,id=void 0,xa=void 0,jd=void 0,zd=ib.vertices,Ad=ib.colors,Bd=ib.lineDistances,Id=zd.length,Jd=Ad.length,Kd=Bd.length,kd=ib.__vertexArray,ld=ib.__colorArray,Cd=ib.__lineDistanceArray,Ld=ib.colorsNeedUpdate,Md=ib.lineDistancesNeedUpdate,
ud=ib.__webglCustomAttributesList,md=void 0,Dd=void 0,Pa=void 0,yc=void 0,Za=void 0,ra=void 0;if(ib.verticesNeedUpdate){for(Oc=0;Oc<Id;Oc++)id=zd[Oc],xa=3*Oc,kd[xa]=id.x,kd[xa+1]=id.y,kd[xa+2]=id.z;g.bindBuffer(g.ARRAY_BUFFER,ib.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,kd,hd)}if(Ld){for(Pc=0;Pc<Jd;Pc++)jd=Ad[Pc],xa=3*Pc,ld[xa]=jd.r,ld[xa+1]=jd.g,ld[xa+2]=jd.b;g.bindBuffer(g.ARRAY_BUFFER,ib.__webglColorBuffer);g.bufferData(g.ARRAY_BUFFER,ld,hd)}if(Md){for(Qc=0;Qc<Kd;Qc++)Cd[Qc]=Bd[Qc];g.bindBuffer(g.ARRAY_BUFFER,
ib.__webglLineDistanceBuffer);g.bufferData(g.ARRAY_BUFFER,Cd,hd)}if(ud){md=0;for(Dd=ud.length;md<Dd;md++)if(ra=ud[md],ra.needsUpdate&&(void 0===ra.boundTo||"vertices"===ra.boundTo)){xa=0;yc=ra.value.length;if(1===ra.size)for(Pa=0;Pa<yc;Pa++)ra.array[Pa]=ra.value[Pa];else if(2===ra.size)for(Pa=0;Pa<yc;Pa++)Za=ra.value[Pa],ra.array[xa]=Za.x,ra.array[xa+1]=Za.y,xa+=2;else if(3===ra.size)if("c"===ra.type)for(Pa=0;Pa<yc;Pa++)Za=ra.value[Pa],ra.array[xa]=Za.r,ra.array[xa+1]=Za.g,ra.array[xa+2]=Za.b,xa+=
3;else for(Pa=0;Pa<yc;Pa++)Za=ra.value[Pa],ra.array[xa]=Za.x,ra.array[xa+1]=Za.y,ra.array[xa+2]=Za.z,xa+=3;else if(4===ra.size)for(Pa=0;Pa<yc;Pa++)Za=ra.value[Pa],ra.array[xa]=Za.x,ra.array[xa+1]=Za.y,ra.array[xa+2]=Za.z,ra.array[xa+3]=Za.w,xa+=4;g.bindBuffer(g.ARRAY_BUFFER,ra.buffer);g.bufferData(g.ARRAY_BUFFER,ra.array,hd)}}}Z.verticesNeedUpdate=!1;Z.colorsNeedUpdate=!1;Z.lineDistancesNeedUpdate=!1;Na.attributes&&l(Na)}else if(db instanceof THREE.ParticleSystem){Na=e(db,Z);Ta=Na.attributes&&m(Na);
if(Z.verticesNeedUpdate||Z.colorsNeedUpdate||db.sortParticles||Ta){var Lb=Z,vd=g.DYNAMIC_DRAW,Rc=db,$a=void 0,Mb=void 0,Nb=void 0,V=void 0,Ob=void 0,gc=void 0,nd=Lb.vertices,wd=nd.length,xd=Lb.colors,Ed=xd.length,oc=Lb.__vertexArray,pc=Lb.__colorArray,Vb=Lb.__sortArray,Fd=Lb.verticesNeedUpdate,Gd=Lb.colorsNeedUpdate,Wb=Lb.__webglCustomAttributesList,lb=void 0,zc=void 0,$=void 0,mb=void 0,na=void 0,T=void 0;if(Rc.sortParticles){pd.copy(Wc);pd.multiply(Rc.matrixWorld);for($a=0;$a<wd;$a++)Nb=nd[$a],
Fa.copy(Nb),Fa.applyProjection(pd),Vb[$a]=[Fa.z,$a];Vb.sort(n);for($a=0;$a<wd;$a++)Nb=nd[Vb[$a][1]],V=3*$a,oc[V]=Nb.x,oc[V+1]=Nb.y,oc[V+2]=Nb.z;for(Mb=0;Mb<Ed;Mb++)V=3*Mb,gc=xd[Vb[Mb][1]],pc[V]=gc.r,pc[V+1]=gc.g,pc[V+2]=gc.b;if(Wb){lb=0;for(zc=Wb.length;lb<zc;lb++)if(T=Wb[lb],void 0===T.boundTo||"vertices"===T.boundTo)if(V=0,mb=T.value.length,1===T.size)for($=0;$<mb;$++)Ob=Vb[$][1],T.array[$]=T.value[Ob];else if(2===T.size)for($=0;$<mb;$++)Ob=Vb[$][1],na=T.value[Ob],T.array[V]=na.x,T.array[V+1]=na.y,
V+=2;else if(3===T.size)if("c"===T.type)for($=0;$<mb;$++)Ob=Vb[$][1],na=T.value[Ob],T.array[V]=na.r,T.array[V+1]=na.g,T.array[V+2]=na.b,V+=3;else for($=0;$<mb;$++)Ob=Vb[$][1],na=T.value[Ob],T.array[V]=na.x,T.array[V+1]=na.y,T.array[V+2]=na.z,V+=3;else if(4===T.size)for($=0;$<mb;$++)Ob=Vb[$][1],na=T.value[Ob],T.array[V]=na.x,T.array[V+1]=na.y,T.array[V+2]=na.z,T.array[V+3]=na.w,V+=4}}else{if(Fd)for($a=0;$a<wd;$a++)Nb=nd[$a],V=3*$a,oc[V]=Nb.x,oc[V+1]=Nb.y,oc[V+2]=Nb.z;if(Gd)for(Mb=0;Mb<Ed;Mb++)gc=xd[Mb],
V=3*Mb,pc[V]=gc.r,pc[V+1]=gc.g,pc[V+2]=gc.b;if(Wb){lb=0;for(zc=Wb.length;lb<zc;lb++)if(T=Wb[lb],T.needsUpdate&&(void 0===T.boundTo||"vertices"===T.boundTo))if(mb=T.value.length,V=0,1===T.size)for($=0;$<mb;$++)T.array[$]=T.value[$];else if(2===T.size)for($=0;$<mb;$++)na=T.value[$],T.array[V]=na.x,T.array[V+1]=na.y,V+=2;else if(3===T.size)if("c"===T.type)for($=0;$<mb;$++)na=T.value[$],T.array[V]=na.r,T.array[V+1]=na.g,T.array[V+2]=na.b,V+=3;else for($=0;$<mb;$++)na=T.value[$],T.array[V]=na.x,T.array[V+
1]=na.y,T.array[V+2]=na.z,V+=3;else if(4===T.size)for($=0;$<mb;$++)na=T.value[$],T.array[V]=na.x,T.array[V+1]=na.y,T.array[V+2]=na.z,T.array[V+3]=na.w,V+=4}}if(Fd||Rc.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,Lb.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,oc,vd);if(Gd||Rc.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,Lb.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,pc,vd);if(Wb){lb=0;for(zc=Wb.length;lb<zc;lb++)if(T=Wb[lb],T.needsUpdate||Rc.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,T.buffer),g.bufferData(g.ARRAY_BUFFER,
T.array,vd)}}Z.verticesNeedUpdate=!1;Z.colorsNeedUpdate=!1;Na.attributes&&l(Na)}}};this.initMaterial=function(a,b,c,d){var e,f,h,i;a.addEventListener("dispose",Yc);var j,k,l,m,q;a instanceof THREE.MeshDepthMaterial?q="depth":a instanceof THREE.MeshNormalMaterial?q="normal":a instanceof THREE.MeshBasicMaterial?q="basic":a instanceof THREE.MeshLambertMaterial?q="lambert":a instanceof THREE.MeshPhongMaterial?q="phong":a instanceof THREE.LineBasicMaterial?q="basic":a instanceof THREE.LineDashedMaterial?
q="dashed":a instanceof THREE.ParticleBasicMaterial&&(q="particle_basic");if(q){var n=THREE.ShaderLib[q];a.uniforms=THREE.UniformsUtils.clone(n.uniforms);a.vertexShader=n.vertexShader;a.fragmentShader=n.fragmentShader}var r,t,v;e=h=t=v=n=0;for(f=b.length;e<f;e++)r=b[e],r.onlyShadow||(r instanceof THREE.DirectionalLight&&h++,r instanceof THREE.PointLight&&t++,r instanceof THREE.SpotLight&&v++,r instanceof THREE.HemisphereLight&&n++);e=h;f=t;h=v;i=n;n=r=0;for(v=b.length;n<v;n++)t=b[n],t.castShadow&&
(t instanceof THREE.SpotLight&&r++,t instanceof THREE.DirectionalLight&&!t.shadowCascade&&r++);m=r;ic&&d&&d.useVertexTexture?l=1024:(b=g.getParameter(g.MAX_VERTEX_UNIFORM_VECTORS),b=Math.floor((b-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(b=Math.min(d.bones.length,b),b<d.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.bones.length+", this GPU supports just "+b+" (try OpenGL instead of ANGLE)")),l=b);a:{t=a.fragmentShader;v=a.vertexShader;n=a.uniforms;b=a.attributes;r=a.defines;
var c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,specularMap:!!a.specularMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:l,useVertexTexture:ic&&d&&d.useVertexTexture,boneTextureWidth:d&&d.boneTextureWidth,boneTextureHeight:d&&d.boneTextureHeight,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,
maxDirLights:e,maxPointLights:f,maxSpotLights:h,maxHemiLights:i,maxShadows:m,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapType:this.shadowMapType,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide},u,w,x,d=[];q?d.push(q):(d.push(t),d.push(v));for(w in r)d.push(w),d.push(r[w]);for(u in c)d.push(u),d.push(c[u]);
q=d.join();u=0;for(w=Ua.length;u<w;u++)if(d=Ua[u],d.code===q){d.usedTimes++;k=d.program;break a}u="SHADOWMAP_TYPE_BASIC";c.shadowMapType===THREE.PCFShadowMap?u="SHADOWMAP_TYPE_PCF":c.shadowMapType===THREE.PCFSoftShadowMap&&(u="SHADOWMAP_TYPE_PCF_SOFT");w=[];for(x in r)d=r[x],!1!==d&&(d="#define "+x+" "+d,w.push(d));d=w.join("\n");x=g.createProgram();w=["precision "+P+" float;",d,rc?"#define VERTEX_TEXTURES":"",N.gammaInput?"#define GAMMA_INPUT":"",N.gammaOutput?"#define GAMMA_OUTPUT":"",N.physicallyBasedShading?
"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?
"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.boneTextureWidth?"#define N_BONE_PIXEL_X "+c.boneTextureWidth.toFixed(1):"",c.boneTextureHeight?"#define N_BONE_PIXEL_Y "+c.boneTextureHeight.toFixed(1):"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+u:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
u=["precision "+P+" float;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",d,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",N.gammaInput?"#define GAMMA_INPUT":"",N.gammaOutput?"#define GAMMA_OUTPUT":"",N.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"",
c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+u:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");u=F("fragment",u+t);w=F("vertex",w+v);g.attachShader(x,w);g.attachShader(x,u);g.linkProgram(x);g.getProgramParameter(x,g.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+g.getProgramParameter(x,g.VALIDATE_STATUS)+", gl error ["+
g.getError()+"]");g.deleteShader(u);g.deleteShader(w);x.uniforms={};x.attributes={};var y;u="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?u.push("boneTexture"):u.push("boneGlobalMatrices");for(y in n)u.push(y);y=u;u=0;for(w=y.length;u<w;u++)n=y[u],x.uniforms[n]=g.getUniformLocation(x,n);u="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(y=0;y<c.maxMorphTargets;y++)u.push("morphTarget"+
y);for(y=0;y<c.maxMorphNormals;y++)u.push("morphNormal"+y);for(k in b)u.push(k);k=u;y=0;for(b=k.length;y<b;y++)u=k[y],x.attributes[u]=g.getAttribLocation(x,u);x.id=kb++;Ua.push({program:x,code:q,usedTimes:1});N.info.memory.programs=Ua.length;k=x}a.program=k;y=a.program.attributes;if(a.morphTargets){a.numSupportedMorphTargets=0;b="morphTarget";for(k=0;k<this.maxMorphTargets;k++)x=b+k,0<=y[x]&&a.numSupportedMorphTargets++}if(a.morphNormals){a.numSupportedMorphNormals=0;b="morphNormal";for(k=0;k<this.maxMorphNormals;k++)x=
b+k,0<=y[x]&&a.numSupportedMorphNormals++}a.uniformsList=[];for(j in a.uniforms)a.uniformsList.push([a.uniforms[j],j])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?g.disable(g.CULL_FACE):(b===THREE.FrontFaceDirectionCW?g.frontFace(g.CW):g.frontFace(g.CCW),a===THREE.CullFaceBack?g.cullFace(g.BACK):a===THREE.CullFaceFront?g.cullFace(g.FRONT):g.cullFace(g.FRONT_AND_BACK),g.enable(g.CULL_FACE))};this.setMaterialFaces=function(a){var b=a.side===THREE.DoubleSide,a=a.side===THREE.BackSide;ta!==
b&&(b?g.disable(g.CULL_FACE):g.enable(g.CULL_FACE),ta=b);X!==a&&(a?g.frontFace(g.CW):g.frontFace(g.CCW),X=a)};this.setDepthTest=function(a){Qa!==a&&(a?g.enable(g.DEPTH_TEST):g.disable(g.DEPTH_TEST),Qa=a)};this.setDepthWrite=function(a){Wa!==a&&(g.depthMask(a),Wa=a)};this.setBlending=function(a,b,c,d){a!==ga&&(a===THREE.NoBlending?g.disable(g.BLEND):a===THREE.AdditiveBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_ALPHA,g.ONE)):a===THREE.SubtractiveBlending?(g.enable(g.BLEND),
g.blendEquation(g.FUNC_ADD),g.blendFunc(g.ZERO,g.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.ZERO,g.SRC_COLOR)):a===THREE.CustomBlending?g.enable(g.BLEND):(g.enable(g.BLEND),g.blendEquationSeparate(g.FUNC_ADD,g.FUNC_ADD),g.blendFuncSeparate(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA,g.ONE,g.ONE_MINUS_SRC_ALPHA)),ga=a);if(a===THREE.CustomBlending){if(b!==Da&&(g.blendEquation(E(b)),Da=b),c!==ja||d!==pa)g.blendFunc(E(c),E(d)),ja=c,pa=d}else pa=
ja=Da=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",Ec),a.__webglTexture=g.createTexture(),N.info.memory.textures++);g.activeTexture(g.TEXTURE0+b);g.bindTexture(g.TEXTURE_2D,a.__webglTexture);g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,a.flipY);g.pixelStorei(g.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);g.pixelStorei(g.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=0===(c.width&c.width-1)&&0===(c.height&c.height-1),e=E(a.format),
f=E(a.type);U(g.TEXTURE_2D,a,d);var h=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<h.length&&d){for(var i=0,j=h.length;i<j;i++)c=h[i],g.texImage2D(g.TEXTURE_2D,i,e,c.width,c.height,0,e,f,c.data);a.generateMipmaps=!1}else g.texImage2D(g.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data);else if(a instanceof THREE.CompressedTexture){i=0;for(j=h.length;i<j;i++)c=h[i],g.compressedTexImage2D(g.TEXTURE_2D,i,e,c.width,c.height,0,c.data)}else if(0<h.length&&d){i=0;for(j=h.length;i<j;i++)c=h[i],g.texImage2D(g.TEXTURE_2D,
i,e,e,f,c);a.generateMipmaps=!1}else g.texImage2D(g.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&g.generateMipmap(g.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else g.activeTexture(g.TEXTURE0+b),g.bindTexture(g.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",Xc);a.__webglTexture=
g.createTexture();N.info.memory.textures++;var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=E(a.format),e=E(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];g.bindTexture(g.TEXTURE_CUBE_MAP,a.__webglTexture);U(g.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=g.createFramebuffer();a.__webglRenderbuffer[f]=g.createRenderbuffer();g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,a.height,0,d,e,null);var h=a,i=g.TEXTURE_CUBE_MAP_POSITIVE_X+f;g.bindFramebuffer(g.FRAMEBUFFER,
a.__webglFramebuffer[f]);g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,i,h.__webglTexture,0);v(a.__webglRenderbuffer[f],a)}c&&g.generateMipmap(g.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=g.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:g.createRenderbuffer(),g.bindTexture(g.TEXTURE_2D,a.__webglTexture),U(g.TEXTURE_2D,a,c),g.texImage2D(g.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=g.TEXTURE_2D,g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer),
g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_STENCIL_ATTACHMENT,g.RENDERBUFFER,a.__webglRenderbuffer):v(a.__webglRenderbuffer,a),c&&g.generateMipmap(g.TEXTURE_2D);b?g.bindTexture(g.TEXTURE_CUBE_MAP,null):g.bindTexture(g.TEXTURE_2D,null);g.bindRenderbuffer(g.RENDERBUFFER,
null);g.bindFramebuffer(g.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=qc,a=hc,d=ob,e=$b);b!==Sc&&(g.bindFramebuffer(g.FRAMEBUFFER,b),g.viewport(d,e,c,a),Sc=b);Tc=c;Uc=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};THREE.WebGLRenderTarget=function(a,b,c){THREE.EventDispatcher.call(this);this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);
this.format=void 0!==c.format?c.format:THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype.clone=function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;a.shareDepthFrom=this.shareDepthFrom;return a};
THREE.WebGLRenderTarget.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.material=this.color=null;this.uvs=[[]];this.z=null};THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.v4=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];
this.material=this.color=null;this.uvs=[[]];this.z=null};THREE.RenderableObject=function(){this.z=this.object=null};THREE.RenderableParticle=function(){this.rotation=this.z=this.y=this.x=this.object=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.z=null;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.material=null};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.geometry.vertices.push(new THREE.Vector3);d.geometry.colors.push(new THREE.Color(b));void 0===d.pointMap[a]&&(d.pointMap[a]=[]);d.pointMap[a].push(d.geometry.vertices.length-1)}THREE.Line.call(this);var d=this;this.geometry=new THREE.Geometry;this.material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.type=THREE.LinePieces;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=
{};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1",
"cf2",3355443);b("cf3","cf4",3355443);this.camera=a;this.update(a)};THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){function a(a,d,e,f){THREE.CameraHelper.__v.set(d,e,f);THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c);a=b.pointMap[a];if(void 0!==a){d=0;for(e=a.length;d<e;d++)b.geometry.vertices[a[d]].copy(THREE.CameraHelper.__v)}}var b=this;THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);a("c",0,0,-1);a("t",0,0,1);a("n1",-1,-1,-1);a("n2",1,-1,-1);a("n3",-1,1,-1);a("n4",1,1,-1);a("f1",-1,-1,1);
a("f2",1,-1,1);a("f3",-1,1,1);a("f4",1,1,1);a("u1",0.7,1.1,-1);a("u2",-0.7,1.1,-1);a("u3",0,2,-1);a("cf1",-1,0,1);a("cf2",1,0,1);a("cf3",0,-1,1);a("cf4",0,1,1);a("cn1",-1,0,-1);a("cn2",1,0,-1);a("cn3",0,-1,-1);a("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0};THREE.CameraHelper.__projector=new THREE.Projector;THREE.CameraHelper.__v=new THREE.Vector3;THREE.CameraHelper.__c=new THREE.Camera;THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({fog:!1,wireframe:!0});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightSphere=new THREE.Mesh(c,d);this.lightSphere.position=this.light.position;this.add(this.lightSphere);c=new THREE.Geometry;c.vertices.push(this.light.position);c.vertices.push(this.light.target.position);c.computeLineDistances();d=new THREE.LineDashedMaterial({dashSize:4,
gapSize:4,opacity:0.75,transparent:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine)};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){this.lightSphere.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.computeLineDistances();this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};THREE.HemisphereLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;var c=new THREE.SphereGeometry(b,4,2);c.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(var d=0;8>d;d++)c.faces[d].materialIndex=4>d?0:1;d=new THREE.MeshBasicMaterial({fog:!1,wireframe:!0});d.color.copy(a.color).multiplyScalar(a.intensity);var e=new THREE.MeshBasicMaterial({fog:!1,wireframe:!0});e.color.copy(a.groundColor).multiplyScalar(a.intensity);this.lightSphere=new THREE.Mesh(c,new THREE.MeshFaceMaterial([d,
e]));this.lightSphere.position=a.position;this.lightSphere.lookAt(new THREE.Vector3);this.add(this.lightSphere)};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.update=function(){this.lightSphere.lookAt(new THREE.Vector3);this.lightSphere.material.materials[0].color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightSphere.material.materials[1].color.copy(this.light.groundColor).multiplyScalar(this.light.intensity)};THREE.PointLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({fog:!1,wireframe:!0});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightSphere=new THREE.Mesh(c,d);this.lightSphere.position=this.light.position;this.add(this.lightSphere)};THREE.PointLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.PointLightHelper.prototype.update=function(){this.lightSphere.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};THREE.SpotLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({fog:!1,wireframe:!0});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightSphere=new THREE.Mesh(c,d);this.lightSphere.position=this.light.position;this.add(this.lightSphere);c=new THREE.CylinderGeometry(1E-4,1,1,8,1,!0);c.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2).translate(new THREE.Vector3(0,-0.5,0)));d=new THREE.MeshBasicMaterial({fog:!1,
wireframe:!0,opacity:0.3,transparent:!0});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightCone=new THREE.Mesh(c,d);this.lightCone.position=this.light.position;c=a.distance?a.distance:1E4;d=2*c*Math.tan(0.5*a.angle);this.lightCone.scale.set(d,d,c);this.lightCone.lookAt(this.light.target.position);this.add(this.lightCone)};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){var a=this.light.distance?this.light.distance:1E4,b=2*a*Math.tan(0.5*this.light.angle);this.lightCone.scale.set(b,b,a);this.lightCone.lookAt(this.light.target.position);this.lightSphere.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightCone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlarePlugin=function(){function a(a,c){var d=b.createProgram(),e=b.createShader(b.FRAGMENT_SHADER),f=b.createShader(b.VERTEX_SHADER),h="precision "+c+" float;\n";b.shaderSource(e,h+a.fragmentShader);b.shaderSource(f,h+a.vertexShader);b.compileShader(e);b.compileShader(f);b.attachShader(d,e);b.attachShader(d,f);b.linkProgram(d);return d}var b,c,d,e,f,h,i,j,k,n,q,t,x;this.init=function(y){b=y.context;c=y;d=y.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);y=0;e[y++]=-1;e[y++]=-1;
e[y++]=0;e[y++]=0;e[y++]=1;e[y++]=-1;e[y++]=1;e[y++]=0;e[y++]=1;e[y++]=1;e[y++]=1;e[y++]=1;e[y++]=-1;e[y++]=1;e[y++]=0;e[y++]=1;y=0;f[y++]=0;f[y++]=1;f[y++]=2;f[y++]=0;f[y++]=2;f[y++]=3;h=b.createBuffer();i=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);j=b.createTexture();k=b.createTexture();b.bindTexture(b.TEXTURE_2D,j);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,
0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,k);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(n=!1,q=a(THREE.ShaderFlares.lensFlare,d)):(n=!0,q=a(THREE.ShaderFlares.lensFlareVertexTexture,d));t={};x={};t.vertex=b.getAttribLocation(q,"position");t.uv=b.getAttribLocation(q,"uv");x.renderType=b.getUniformLocation(q,"renderType");x.map=b.getUniformLocation(q,"map");x.occlusionMap=b.getUniformLocation(q,"occlusionMap");x.opacity=
b.getUniformLocation(q,"opacity");x.color=b.getUniformLocation(q,"color");x.scale=b.getUniformLocation(q,"scale");x.rotation=b.getUniformLocation(q,"rotation");x.screenPosition=b.getUniformLocation(q,"screenPosition")};this.render=function(a,d,e,f){var a=a.__webglFlares,u=a.length;if(u){var r=new THREE.Vector3,A=f/e,B=0.5*e,I=0.5*f,D=16/f,w=new THREE.Vector2(D*A,D),H=new THREE.Vector3(1,1,0),M=new THREE.Vector2(1,1),F=x,D=t;b.useProgram(q);b.enableVertexAttribArray(t.vertex);b.enableVertexAttribArray(t.uv);
b.uniform1i(F.occlusionMap,0);b.uniform1i(F.map,1);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(D.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(D.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.disable(b.CULL_FACE);b.depthMask(!1);var U,v,W,E,R;for(U=0;U<u;U++)if(D=16/f,w.set(D*A,D),E=a[U],r.set(E.matrixWorld.elements[12],E.matrixWorld.elements[13],E.matrixWorld.elements[14]),r.applyMatrix4(d.matrixWorldInverse),r.applyProjection(d.projectionMatrix),H.copy(r),M.x=H.x*B+B,
M.y=H.y*I+I,n||0<M.x&&M.x<e&&0<M.y&&M.y<f){b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,j);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,M.x-8,M.y-8,16,16,0);b.uniform1i(F.renderType,0);b.uniform2f(F.scale,w.x,w.y);b.uniform3f(F.screenPosition,H.x,H.y,H.z);b.disable(b.BLEND);b.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.activeTexture(b.TEXTURE0);b.bindTexture(b.TEXTURE_2D,k);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,M.x-8,M.y-8,16,16,0);b.uniform1i(F.renderType,1);b.disable(b.DEPTH_TEST);
b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,j);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);E.positionScreen.copy(H);E.customUpdateCallback?E.customUpdateCallback(E):E.updateLensFlares();b.uniform1i(F.renderType,2);b.enable(b.BLEND);v=0;for(W=E.lensFlares.length;v<W;v++)R=E.lensFlares[v],0.001<R.opacity&&0.001<R.scale&&(H.x=R.x,H.y=R.y,H.z=R.z,D=R.size*R.scale/f,w.x=D*A,w.y=D,b.uniform3f(F.screenPosition,H.x,H.y,H.z),b.uniform2f(F.scale,w.x,w.y),b.uniform1f(F.rotation,R.rotation),b.uniform1f(F.opacity,
R.opacity),b.uniform3f(F.color,R.color.r,R.color.g,R.color.b),c.setBlending(R.blending,R.blendEquation,R.blendSrc,R.blendDst),c.setTexture(R.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};THREE.ShadowMapPlugin=function(){var a,b,c,d,e,f,h=new THREE.Frustum,i=new THREE.Matrix4,j=new THREE.Vector3,k=new THREE.Vector3,n=new THREE.Vector3;this.init=function(h){a=h.context;b=h;var h=THREE.ShaderLib.depthRGBA,i=THREE.UniformsUtils.clone(h.uniforms);c=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i});d=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,
vertexShader:h.vertexShader,uniforms:i,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(q,t){var x,y,m,l,C,u,r,A,B,I=[];l=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFace===THREE.CullFaceFront?
a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);x=0;for(y=q.__lights.length;x<y;x++)if(m=q.__lights[x],m.castShadow)if(m instanceof THREE.DirectionalLight&&m.shadowCascade)for(C=0;C<m.shadowCascadeCount;C++){var D;if(m.shadowCascadeArray[C])D=m.shadowCascadeArray[C];else{B=m;r=C;D=new THREE.DirectionalLight;D.isVirtual=!0;D.onlyShadow=!0;D.castShadow=!0;D.shadowCameraNear=B.shadowCameraNear;D.shadowCameraFar=B.shadowCameraFar;D.shadowCameraLeft=B.shadowCameraLeft;D.shadowCameraRight=B.shadowCameraRight;
D.shadowCameraBottom=B.shadowCameraBottom;D.shadowCameraTop=B.shadowCameraTop;D.shadowCameraVisible=B.shadowCameraVisible;D.shadowDarkness=B.shadowDarkness;D.shadowBias=B.shadowCascadeBias[r];D.shadowMapWidth=B.shadowCascadeWidth[r];D.shadowMapHeight=B.shadowCascadeHeight[r];D.pointsWorld=[];D.pointsFrustum=[];A=D.pointsWorld;u=D.pointsFrustum;for(var w=0;8>w;w++)A[w]=new THREE.Vector3,u[w]=new THREE.Vector3;A=B.shadowCascadeNearZ[r];B=B.shadowCascadeFarZ[r];u[0].set(-1,-1,A);u[1].set(1,-1,A);u[2].set(-1,
1,A);u[3].set(1,1,A);u[4].set(-1,-1,B);u[5].set(1,-1,B);u[6].set(-1,1,B);u[7].set(1,1,B);D.originalCamera=t;u=new THREE.Gyroscope;u.position=m.shadowCascadeOffset;u.add(D);u.add(D.target);t.add(u);m.shadowCascadeArray[C]=D;console.log("Created virtualLight",D)}r=m;A=C;B=r.shadowCascadeArray[A];B.position.copy(r.position);B.target.position.copy(r.target.position);B.lookAt(B.target);B.shadowCameraVisible=r.shadowCameraVisible;B.shadowDarkness=r.shadowDarkness;B.shadowBias=r.shadowCascadeBias[A];u=r.shadowCascadeNearZ[A];
r=r.shadowCascadeFarZ[A];B=B.pointsFrustum;B[0].z=u;B[1].z=u;B[2].z=u;B[3].z=u;B[4].z=r;B[5].z=r;B[6].z=r;B[7].z=r;I[l]=D;l++}else I[l]=m,l++;x=0;for(y=I.length;x<y;x++){m=I[x];m.shadowMap||(C=THREE.LinearFilter,b.shadowMapType===THREE.PCFSoftShadowMap&&(C=THREE.NearestFilter),m.shadowMap=new THREE.WebGLRenderTarget(m.shadowMapWidth,m.shadowMapHeight,{minFilter:C,magFilter:C,format:THREE.RGBAFormat}),m.shadowMapSize=new THREE.Vector2(m.shadowMapWidth,m.shadowMapHeight),m.shadowMatrix=new THREE.Matrix4);
if(!m.shadowCamera){if(m instanceof THREE.SpotLight)m.shadowCamera=new THREE.PerspectiveCamera(m.shadowCameraFov,m.shadowMapWidth/m.shadowMapHeight,m.shadowCameraNear,m.shadowCameraFar);else if(m instanceof THREE.DirectionalLight)m.shadowCamera=new THREE.OrthographicCamera(m.shadowCameraLeft,m.shadowCameraRight,m.shadowCameraTop,m.shadowCameraBottom,m.shadowCameraNear,m.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}q.add(m.shadowCamera);b.autoUpdateScene&&q.updateMatrixWorld()}m.shadowCameraVisible&&
!m.cameraHelper&&(m.cameraHelper=new THREE.CameraHelper(m.shadowCamera),m.shadowCamera.add(m.cameraHelper));if(m.isVirtual&&D.originalCamera==t){C=t;l=m.shadowCamera;u=m.pointsFrustum;B=m.pointsWorld;j.set(Infinity,Infinity,Infinity);k.set(-Infinity,-Infinity,-Infinity);for(r=0;8>r;r++)A=B[r],A.copy(u[r]),THREE.ShadowMapPlugin.__projector.unprojectVector(A,C),A.applyMatrix4(l.matrixWorldInverse),A.x<j.x&&(j.x=A.x),A.x>k.x&&(k.x=A.x),A.y<j.y&&(j.y=A.y),A.y>k.y&&(k.y=A.y),A.z<j.z&&(j.z=A.z),A.z>k.z&&
(k.z=A.z);l.left=j.x;l.right=k.x;l.top=k.y;l.bottom=j.y;l.updateProjectionMatrix()}l=m.shadowMap;u=m.shadowMatrix;C=m.shadowCamera;C.position.getPositionFromMatrix(m.matrixWorld);n.getPositionFromMatrix(m.target.matrixWorld);C.lookAt(n);C.updateMatrixWorld();C.matrixWorldInverse.getInverse(C.matrixWorld);m.cameraHelper&&(m.cameraHelper.visible=m.shadowCameraVisible);m.shadowCameraVisible&&m.cameraHelper.update();u.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);u.multiply(C.projectionMatrix);u.multiply(C.matrixWorldInverse);
i.multiplyMatrices(C.projectionMatrix,C.matrixWorldInverse);h.setFromMatrix(i);b.setRenderTarget(l);b.clear();B=q.__webglObjects;m=0;for(l=B.length;m<l;m++)if(r=B[m],u=r.object,r.render=!1,u.visible&&u.castShadow&&(!(u instanceof THREE.Mesh||u instanceof THREE.ParticleSystem)||!u.frustumCulled||h.intersectsObject(u)))u._modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,u.matrixWorld),r.render=!0;m=0;for(l=B.length;m<l;m++)r=B[m],r.render&&(u=r.object,r=r.buffer,w=u.material instanceof THREE.MeshFaceMaterial?
u.material.materials[0]:u.material,A=0<u.geometry.morphTargets.length&&w.morphTargets,w=u instanceof THREE.SkinnedMesh&&w.skinning,A=u.customDepthMaterial?u.customDepthMaterial:w?A?f:e:A?d:c,r instanceof THREE.BufferGeometry?b.renderBufferDirect(C,q.__lights,null,A,r,u):b.renderBuffer(C,q.__lights,null,A,r,u));B=q.__webglObjectsImmediate;m=0;for(l=B.length;m<l;m++)r=B[m],u=r.object,u.visible&&u.castShadow&&(u._modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,u.matrixWorld),b.renderImmediateObject(C,
q.__lights,null,c,u))}x=b.getClearColor();y=b.getClearAlpha();a.clearColor(x.r,x.g,x.b,y);a.enable(a.BLEND);b.shadowMapCullFace===THREE.CullFaceFront&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;THREE.SpritePlugin=function(){function a(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var b,c,d,e,f,h,i,j,k,n;this.init=function(a){b=a.context;c=a;d=a.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);a=0;e[a++]=-1;e[a++]=-1;e[a++]=0;e[a++]=0;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;a=0;f[a++]=0;f[a++]=1;f[a++]=2;f[a++]=0;f[a++]=2;f[a++]=3;h=b.createBuffer();i=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,
e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);var a=THREE.ShaderSprite.sprite,t=b.createProgram(),x=b.createShader(b.FRAGMENT_SHADER),y=b.createShader(b.VERTEX_SHADER),m="precision "+d+" float;\n";b.shaderSource(x,m+a.fragmentShader);b.shaderSource(y,m+a.vertexShader);b.compileShader(x);b.compileShader(y);b.attachShader(t,x);b.attachShader(t,y);b.linkProgram(t);j=t;k={};n={};k.position=b.getAttribLocation(j,"position");k.uv=b.getAttribLocation(j,
"uv");n.uvOffset=b.getUniformLocation(j,"uvOffset");n.uvScale=b.getUniformLocation(j,"uvScale");n.rotation=b.getUniformLocation(j,"rotation");n.scale=b.getUniformLocation(j,"scale");n.alignment=b.getUniformLocation(j,"alignment");n.color=b.getUniformLocation(j,"color");n.map=b.getUniformLocation(j,"map");n.opacity=b.getUniformLocation(j,"opacity");n.useScreenCoordinates=b.getUniformLocation(j,"useScreenCoordinates");n.sizeAttenuation=b.getUniformLocation(j,"sizeAttenuation");n.screenPosition=b.getUniformLocation(j,
"screenPosition");n.modelViewMatrix=b.getUniformLocation(j,"modelViewMatrix");n.projectionMatrix=b.getUniformLocation(j,"projectionMatrix");n.fogType=b.getUniformLocation(j,"fogType");n.fogDensity=b.getUniformLocation(j,"fogDensity");n.fogNear=b.getUniformLocation(j,"fogNear");n.fogFar=b.getUniformLocation(j,"fogFar");n.fogColor=b.getUniformLocation(j,"fogColor");n.alphaTest=b.getUniformLocation(j,"alphaTest")};this.render=function(d,e,f,y){var m=d.__webglSprites,l=m.length;if(l){var C=k,u=n,r=y/
f,f=0.5*f,A=0.5*y;b.useProgram(j);b.enableVertexAttribArray(C.position);b.enableVertexAttribArray(C.uv);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(C.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(C.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.uniformMatrix4fv(u.projectionMatrix,!1,e.projectionMatrix.elements);b.activeTexture(b.TEXTURE0);b.uniform1i(u.map,0);var B=C=0,I=d.fog;I?(b.uniform3f(u.fogColor,I.color.r,I.color.g,I.color.b),
I instanceof THREE.Fog?(b.uniform1f(u.fogNear,I.near),b.uniform1f(u.fogFar,I.far),b.uniform1i(u.fogType,1),B=C=1):I instanceof THREE.FogExp2&&(b.uniform1f(u.fogDensity,I.density),b.uniform1i(u.fogType,2),B=C=2)):(b.uniform1i(u.fogType,0),B=C=0);for(var D,w,H=[],I=0;I<l;I++)D=m[I],w=D.material,D.visible&&0!==w.opacity&&(w.useScreenCoordinates?D.z=-D.position.z:(D._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,D.matrixWorld),D.z=-D._modelViewMatrix.elements[14]));m.sort(a);for(I=0;I<l;I++)D=
m[I],w=D.material,D.visible&&0!==w.opacity&&(w.map&&w.map.image&&w.map.image.width)&&(b.uniform1f(u.alphaTest,w.alphaTest),!0===w.useScreenCoordinates?(b.uniform1i(u.useScreenCoordinates,1),b.uniform3f(u.screenPosition,(D.position.x*c.devicePixelRatio-f)/f,(A-D.position.y*c.devicePixelRatio)/A,Math.max(0,Math.min(1,D.position.z))),H[0]=c.devicePixelRatio,H[1]=c.devicePixelRatio):(b.uniform1i(u.useScreenCoordinates,0),b.uniform1i(u.sizeAttenuation,w.sizeAttenuation?1:0),b.uniformMatrix4fv(u.modelViewMatrix,
!1,D._modelViewMatrix.elements),H[0]=1,H[1]=1),e=d.fog&&w.fog?B:0,C!==e&&(b.uniform1i(u.fogType,e),C=e),e=1/(w.scaleByViewport?y:1),H[0]*=e*r*D.scale.x,H[1]*=e*D.scale.y,b.uniform2f(u.uvScale,w.uvScale.x,w.uvScale.y),b.uniform2f(u.uvOffset,w.uvOffset.x,w.uvOffset.y),b.uniform2f(u.alignment,w.alignment.x,w.alignment.y),b.uniform1f(u.opacity,w.opacity),b.uniform3f(u.color,w.color.r,w.color.g,w.color.b),b.uniform1f(u.rotation,D.rotation),b.uniform2fv(u.scale,H),c.setBlending(w.blending,w.blendEquation,
w.blendSrc,w.blendDst),c.setDepthTest(w.depthTest),c.setDepthWrite(w.depthWrite),c.setTexture(w.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE)}}};THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};
